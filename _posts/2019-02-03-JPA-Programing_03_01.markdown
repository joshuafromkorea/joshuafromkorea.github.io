---
layout: post
title: "자바 ORM 표준 JPA 프로그래밍- 03 영속성 관리"
date: 2019-02-03
categories:
---
JPA가 제공하는 기능의 핵심 배경이 되는 엔티티 매니저에 대해서 설명한다. 엔티티 매니저를 통해 어떻게 JPA와 Hibernate라는 구현 프레임워크가 개발 코드와 관계형 데이터베이스 사이에서 엔티티를 관리하는지 알아본다. 또한 엔티티가 엔티티매니저를 통해서 관리되는 생명주기, 즉 영속, 비영속, 준영속 상태를 다룬다.

프레임워크가 어떻게 작동하는지에 대해서 아는것은 매우 중요하다. 학원에서 스프링 프레임워크를 아주 단기간에 배웠을 때, 충분한 이해 없이 예제를 따라가는 수준에서 사용했고, 실제로 실무에서도 기존에 선배들이 짜놓은 코드를 벗어나지 못하는 일이 많았다. 그리고 작년에 스프링 프레임워크에 대해서 공부하면서, 스프링이 존재하게 된 이력과 개발 철학에 대해 이해하게 되면서 추상화된 프레임워크를 쓰는 마음자세가 달라졌다.

그런의미에서 본장에 대해서 충분히 이해하고 넘어가는게 큰 도움이 될 것이다.

---
## 3 영속성 관리

JPA가 제공하는 기능을 두 개로 분리한다면 다음과 같다

* 설계: 엔티티와 테이블을 매핑
* 사용: 매핑한 엔티티를 사용

이번 장에서는 엔티티를 엔티티 매니저를 통해서 사용하는 부분에 대해서 더 깊게 알아보자. 해당 내용들은 JPA 표준을 구현하고 있는 하이버네이트를 기준으로 다뤄진다.

### 3.1 엔티티 매니저 팩토리와 엔티티 매니저

2장에서 살펴본 것과 같이 엔티티 매니저는, 영속성 유닛의 설정정보를 조회하여, 만든 엔티티 매니저 팩토리를 통해서 생성한다. 그리고 엔티티 팩토리 매니저를 만드는 작업은 비용이 많이 들기 때문에 한 애플리케이션에서는 한 개만 생성해서 공유한다. 

반면에 엔티티 매니저 팩토리가 생성하는 엔티티 매니저는 생성 비용이 거의 들지 않으며, DB 커넥션과 밀접하게 연관 되어있기 때문에, 여러 스레드간 접근시 동시성 문제가 발생하여서 스레드간 공유하면 안된다.

<div class="mermaidTooltip">
graph LR
	F[EntityManagerFactory]
	E1[EntityManager1]
	E2[EntityManager2]
	E3[EntityManager3]
	C1[conn]
	C2[conn]
	C3[conn]
	D((DB))
	subgraph 커넥션풀
	C1
	C2
	C3
	end
	F-->|생성|E1
	F-->|생성|E2
	F-->|생성|E3
	E2-->|사용|C2
	E3-->|사용|C3
	C1-->D
	C2-->D
	C3-->D
</div>

**엔티티 매니저가 가진 특징**중 하나는 위의 그림과 같이, 실제로 모든 엔티티 매니저가 항상 커넥션을 사용하는 것은 아니라는 것이다. 데이터베이스 연결이 꼭 필요한 시점까지 커넥션을 획득하지 않는다, 일반적으로 트랜잭션을 시작할 때 커넥션을 획득한다.

**커넥션풀**은 일반적으로 엔티티 매니저 팩토리가 생성 될 때 만들어진다. 하지만 이런 설정은 JPA를 어떤 자바 환경에서 사용하느냐에 따라 달라지며, 스프링 프레임워크와 같은 J2EE에서는 컨테이너가 제공하는 데이터소스를 사용한다.

### 3.2 영속성 컨테스트란?

`persist()`메소드를 사용해 엔티티를 저장하는 것을 지금까지는 해당 엔티티의 정보를 DB에 저장하는 것으로 이해해왔다. 하지만 엄밀하게 말하자면 해당 메소드는 엔티티를 **엔티티 매니저**를 사용하여 **영속성 컨텍스트에**(persistence context)에 저장하는 것이다. 영속성 컨텍스트는 논리적인 개념의 **엔티티를 영구 저장하는 환경**이라고 보면 된다.

### 3.3 엔티티의 생명주기

엔티티 객체는 JPA안에서 아래의 4가지 상태를 가진다..

* **비영속**(new/transient): 영속성 컨텍스트와 전혀 관계가 없는 상태
* **영속**(managed): 영속성 컨텍스트에 저장된 상태
* **준영속**(detached): 영속성 컨텍스트에 저장되었다가 분리된 상태
* **삭제**(deleted): 삭제된 상태

그리고 이러한 상태는 아래의 생명주기로 표현될 수 있다.
<div class="mermaid">
graph LR
	N(New)
	M(Managed)
	R(Removed)
	D(Detached)
	N-->|"persist()"|M
	M-->|"remove()"|R
	R-->|"persist()"|M
	M-->|"detach()"|D
	D-->|"merge()"|M
</div>

#### 비영속

엔티티 객체가 생성은 되었지만, 영속성 컨텍스트와 관련이 없는 상태이다.

```java
Member member = new Member();
member.setId(...);
member.setName(...);
```

##### 비영속 상태

<div class="mermaid">
graph LR
	M((member))
	subgraph 영속성 컨텍스트
		D
		E[ ]
	end
	M-->D[ ]
	style D fill:#ffccb3, stroke:#ff661a, height:0px, width:90px;
	style E fill:#ffccb3, stroke:#ff661a, height:0px, width:90px;
	linkStyle 0 stroke:#FFFFF,stroke-width:0;
</div>

#### 영속

비영속 상태의 엔티티 객체를 영속성 컨텍스트에 저장 (`persist()`) 한 상태이다. 이 상태에서는 영속 컨텍스트가 엔티티를 관리 한다. 또한 DB로 부터 `find()`를 통해 조회하여 만들어진 엔티티도 영속성 컨텍스트가 관리하는 **영속상태**이다.

```java
em.persiste(member);
```

##### 영속 상태

<div class="mermaid">
graph LR
	subgraph 영속 컨텍스트
	m((member))
	end
	
</div>

#### 준영속

영속성 컨텍스트가 관리하던 엔티티를 관리 하지 않도록 만든 상태이다. `detach()`메서드를 사용하면 해당 엔티티는 준영속 상태가 된다. 또한 영속성 컨텍스트를 닫거나 (`close()`), 초기화 (`clear()`) 할 때도 관리하던 모든 엔티티가 준영속 상태가 된다.

```java
em.detach(member);
```

#### 삭제

`remove()` 메서드를 통해서 영속성 컨텍스트에서 삭제한 뒤의 상태로, 이상태에서는 **데이터베이스**에서도 데이터가 삭제된다.

```java
em.remove(member);
```

### 3.4 영속성 컨텍스트의 특징

* **식별 자 값**: 영속성 컨텍스트로 관리하는 엔티티는 식별자 값이 반드시 있어야 한다.
* **영속성 컨텍스트와 데이터베이스**: JPA에서는 트랜잭션을 커밋하는 순간 영속성 컨텍스트가 관리하던 엔티티를 데이터베이스에 반영한다. 이를 플러시(flush)라 한다.
* **영속성 컨텍스트를 통한 관리의 장점**
  * 1차 캐시
  * 동일성 보장
  * 트랜잭션을 지원하는 쓰기 지연
  * 변경 감지
  * 지연 로딩

자 이제 이러한 특징들을 세세하게 알아보자.

#### 3.4.1 엔티티 조회

엔티티 객체를 생성해서 비영속 상태의 엔티티를 생성하고, 이를 영속상태로 전환하면 해당 엔티티는, 먼저 영속성 컨텍스트 내부의 **1차 캐시**에 저장된다. 이 1차 캐시가 Map의 형태를 하고 있기 때문에, `@Id`로 정의한 식별자가 필요한 것이다.

```java
Member member = new Member();
member.setId(...);
member.setName(...);

em.persist(member);
```

여러번 살펴본 위 코드의 마지막 줄이 실행 된 순간은 1차 캐시에 엔티티가 저장된 상태로, 데이터베이스에는 아직 데이터가 **<u>저장되지 않은</u>** 상태이다. 영속성 컨텍스트에서 엔티티를 구별하는 값은 데이터베이스의 기본 키와 동일하다. 따라서 엔티티를 조회할 때에도, 엔티티의 타입과 동시에 해당 키를 식별자로 전달하는 것이다. 이런 두 단계로 진행된다.

##### 1차 캐시에서 조회

`em.find()`메소드가 호출 된경우, 먼저 1차캐시에서 식별자 값으로 엔티티를 찾는다. 엔티티가 존재한다면 해당 엔티티는 데이터베이스를 조회하지 않고 메모리에 있는 엔티티로 반환한다.

##### 데이터베이스에서 조회

1차캐시에서 식별자를 사용해 찾고자 하는 엔티티를 발견하지 못한 경우에는, 데이터베이스를 조회하는데, 이때 알아둘 것은 DB에서 조회한 데이터를 **먼저** 1차캐시에 저장한 후에 엔티티로 반환한다는 것이다.

##### 영속 엔티티의 동일성 보장

영속성 컨텍스트의 1차캐시에 엔티티를 보관하는 장점은, SQL을 직접 객체로 매핑하는 개발에서 문제가되는 **객체 동일성**의 문제를 해결해준다. 1차캐시에 엔티티가 존재하는 경우에는 몇번을 호출해도 동일 엔티티 객체를 반환하기 때문에 클라이언트 코드에서는 테이블상 유니크한 row의 값을 가지는 객체는 항상 같게 여기고 개발할 수 있다.

#### 3.4.2 엔티티 등록

앞서서 엔티티 매니저는 커밋 전까지 엔티티 데이터를 DB에 전송하지 않는다고 했다. 그 과정을 코드로 살펴보자.

```java
//엔티티 매니저 팩토리 생성
EntityManagerFactory emf = Persistence.createEntityManagerFactory("jpabook");
EntityManager em = emf.createEntityManager(); //엔티티 매니저 생성
EntityTransaction tx = em.getTransaction(); //트랜잭션 기능 획득

//데이터 변경시 반드시 트랜잭션을 시작해야 한다.
tx.begin(); // 트랜잭션 시작

//엔티티 매니저에 CRUD 메소드가 호출되면 SQL이 생성된다.
em.persist(memberA);
em.persist(memberB);
//여기 까지의 INSERT SQL은 데이터베이스로 전달되지 않는다. -> Query 저장소에 저장

//Commit하는 순간 데이터베이스에 INSERT SQL이 전달된다.
tx.commit();
```

트랜잭션 커밋 전까지 이뤄진 INSERT SQL들은 **영속 컨텍스트**의 내부 쿼리 저장소에 모아둔다. 그리고 커밋이 이뤄질 때 모아둔 쿼리를 보내는데 이것을 **쓰기 지연**<sub>transaction write-behind</sub>라고 한다.

##### 트랜잭션을 지원하는 쓰기 지연이 가능한 이유

```pseudocode
begin();// transaction 시작

save(A);
save(B);
save(C);

commit(); // transaction 커밋
```

위와 같은 애플리케이션 코드가 있을 경우, 이를 처리하는 방법은 `save()`가 호출 될때마다 쿼리를 전송하거나, 아니면 `commit()`이 호출되기 직전에 그 동안 발생한 쿼리를 모두 모아서 전송하는 방법으로 나뉜다. 하지만 결국 영구적으로 데이터를 저장한다는 데이터베이스의 특징상 한 트랜잭션안에서 커밋과 롤백이 일어나는 경우 결과적으로는 동일하게 된다. 그렇기 때문에 트랜잭션에 대한 쓰기 지연이 지원 가능하고 이를 통해 성능을 최적화 할 수 있는 것이다.

#### 3.4.3 엔티티 수정

##### SQL 수정 쿼리의 문제점

SQL을 개발자가 직접 작성하면, 수정 쿼리도 직접 작성해야 한다. 일반적으로 프로젝트가 커지면서 요구사항이 늘어나고 수정쿼리도 점점 추가되게 된다. 또한 유지보수 개발자는 요구사항에 따라 기존 개발자가 만든 쿼리를 사용하기 보다는 자기가 새로운 요구사항에 맞는 쿼리를 만들어서 새 비즈니스 로직을 처리하기를 선호한다.

> 이런 개발 방식의 문제점은 수정 쿼리가 많아지는 것은 물론이고 비즈니스 로직을 분석하기 위해 SQL을 계속 확인해야 한다. 결국 직접적이든 간접적이든 비즈니스 로직이 SQL에 의존하게 된다.

##### 변경 감지

JPA는 엔티티 수정에 따른 이런 문제를 변경 감지로 처리한다.

```java
//엔티티 매니저 팩토리 생성
EntityManagerFactory emf = Persistence.createEntityManagerFactory("jpabook");
EntityManager em = emf.createEntityManager(); //엔티티 매니저 생성
EntityTransaction tx = em.getTransaction(); //트랜잭션 기능 획득

//데이터 변경시 반드시 트랜잭션을 시작해야 한다.
tx.begin(); // 트랜잭션 시작

//영속 엔티티 조회
Member memberA = em.find(Member.class, "memberA");

//영속 상태의 엔티티 수정
memberA.setName("hi");
memberA.setAge(10);

//Commit하는 순간 데이터베이스에 INSERT SQL이 전달된다.
tx.commit();
```

앞선 장에서 언급한 것과 같이 JPA에는 DB와 연동하는 기술들이 흔히 가지고 있는 UPDATE SQL에 대응하는 명시적 기능이 존재하지 않는다. 단지 비영속 상태의 엔티티나, 데이터베이스상의 데이터가 영속상태의 엔티티로 영속컨텍스트에 보관될때 **스냅샷**이라는 것이 초기 값이 저장되는데, 이에 대한 변경이 일어나면, 이런 변경사항을 반영한다. 이를 **변경 감지**<sub>dirty checking</sub>라고 한다. 변경 감지는 아래와 같은 절차로 일어난다.

1. 트랜잭션 커밋이 발생되면, 내부적으로 `flush()`가 호출 된다.
2. 엔티티와 스냅샷을 비교해 변경된 엔티티를 찾는다
3. 변경된 엔티티가 있으면 수정 쿼리를 생성해 쓰기지연 SQL 저장소로 담는다.
4. 쓰기지연 저장소의 SQL을 데이터베이스에 전달한다.
5. 데이터베이스에 트랜잭션을 커밋한다.

변경 감지로 인한 UPDATE SQL은 또한 **모든필드를 업데이트**하는 특징이 있다. 분명 데이터 전송량이 증가한다는 단점이 있지만 아래와 같은 이유로 이 특징을 유지한다.

* 모든 필드를 사용하면 항상 같은 쿼리를 사용할 수 있다. == **쿼리 재사용 가능**
* 데이터베이스에 동일한 쿼리를 보내면, 데이터베이스도 이전에 파싱한 쿼리를 재사용한다.

물론 이러한 전략대신에 동적으로 업데이트를 할 수 있는 전략도 제공한다. 이럴때는 하이버네이트의 확장 기능인 `@DyanamicUpdate`기능을 사용할 수도 있다. 환경에 따라 결과가 다르기도 하기 때문에 어떠한 상황에 동적 쓰기를 해야하는지는 개발자가 결정해야 하는 몫이다.

#### 3.4.4 엔티티 삭제

엔티티 삭제는 `remove()` 메소드를 통해서 수행하는데, 먼저 삭제 대상 엔티티를 조회해서, 해당 엔티티를 다시 매개변수로 전달하면 된다. 해당 메소드가 호출되는 즉시 영속성 컨텍스트에서는 엔티티가 제거되지만, 커밋이 일어나기 전까지는 해당 트랜잭션의 데이터베이스 반영은 일어나지 않는다.

### 3.5 플러시

플러시(`flush()`) 는 영속성 컨텍스트의 변경 내용을 데이터베이스에 반영하는 작업이다. 아래의 절차로 일어난다.

1. **변경감지의 동작**: 모든 엔티티를 스냅샷과 비교하여 수정된 엔티티를 찾음
2. **수정 쿼리 생성**: 수정된 엔티티는 수정쿼리를 만들어 쓰기지연 SQL 저장소에 등록
3. **SQL 전송**: 쓰기지연 SQL 저장소에 저장된 쿼리를 데이터베이스에 전송

플러시 작업이 일어나도록 하는 방법은 3가지다.

1. **`EntityManager.flush()`를 직접 호출**: 테스트용도 혹은 다른 프레임워크와 JPA를 병행 사용할 때를 제외하곤 사용하지 않는다.
2. **트랜잭션 커밋 시 플러시 자동 호출**: 트랜잭션 커밋시에 영속성 컨텍스트와 데이터베이스를 동기화 할 목적으로 플러시를 자동으로 호출한다
3. **JPQL 쿼리 실행 시 플러시가 자동 호출**: JPQL은 SQL로 변환되어서 DB를 직접 조회한다. 따라서 JPQL호출전에는 반드시 영속성 컨텍스트와 DB를 동기화 하여 잘못된 JPQL 조회를 방지한다. `find()` 를 호출하는 경우엔 플러시가 실행되지 않는다.

#### 3.5.1 플러시 모드 옵션

`javax.persistence.FlushModeType`을 사용하면 플러시 기능의 모드를 사용할 수 있다.

* `AUTO`: 기본 값으로 커밋이나 쿼리를 실행할 때만 플러시한다
* `COMMIT`: 커밋시에만 플러시를 실행한다. 성능 최적화의 목적으로 쓴다

> 플러시라는 이름으로 인해 영속성 컨텍스트에 보관된 엔티티를 지운다고 생각하면 안된다. 다시 한 번 강조하지만 영속성 컨테스트의 변경 내용을 데이터베이스에 동기화하는 것이 플러시다.

### 3.4 준영속

앞서서 언급했지만 다루지 않았던 **준영속**(detached) 상태는 영속상태에 있던 (영속성 컨텍스트가 관리하던) 엔티티가 영속성 컨텍스트에서 **분리**된 상태를 말한다. 이 상태의 엔티티는 영속성 컨텍스트가 제공하는 기능을 사용할 수 없다. 다음의 3가지 방법으로 엔티티를 준영속상태로 만들 수 있다.

1. **`detach(entity)`**: 특정 엔티티만 준영속 상태로 만든다
2. **`clear()`**: 영속성 컨텍스트를 완전히 초기화한다
3. **`close()`**: 영속성 컨텍스트를 종료한다.

#### 3.6.1 엔티티를 준영속 상태로 전환: `detach()`

```java
//준영속 메서드 정의
public void detach(Object entity);
```

만약 아래와 같은 코드로 영속 상태의 엔티티를 준영속상태로 전환한다고 하자.

```java
Member member = new Member();
member.setId(...);
member.setName(...);

//영속상태
em.persist(member);

//준영속 상태로 만듬
em.detach(member);

transaction.commit(); //트랜잭션 커밋
```

`em.persist(member)`를 통해 엔티티가 영속상태에 들어가면, 새로 생성된 엔티티이기 때문에 영속성 컨텍스트에서는 쓰기지연 SQL저장소에 INSERT SQL을 저장할 것이다. 하지만, `em.detach(member)` 호출을 통해 엔티티가 준영속 상태가 되는 즉시 엔티티정보를 포함한 모든 관련정보가 영속성컨텍스트에서 **제거**된다.

 따라서 트랜잭션이 마지막에 커밋되더라도, 쓰기지연 SQL저장소가 관리하던 해당 엔티티의 INSERT SQL도 삭제되었기 때문에 데이터베이스에 저장되지도 않는다.

#### 3.6.2 영속성 컨텍스트 초기화: `clear()`

영속성 컨텍스트 자체를 초기화 하는 `clear()`메소드는 해당 컨텍스트 내의 모든 엔티티를 준영속 상태로 만든다.

```java
//엔티티 조회, 영속 상태
Member member = em.find(Member.class, "memberA");

em.clear(); //영속성 컨텍스트 초기화

//준영속 상태
member.setUserName("changeName");
```

`Member.setUserName()`메소드를 통해서 준영속 상태의 엔티티를 변경해도, 영속성 컨텍스트가 지원하는 변경감지 기능이 작동하지 않기 때문에 해당 변경은 데이터베이스 반영되지 않는다.

#### 3.6.3 영속성 컨텍스트 종료: `close()`

영속성 컨텍스트를 종료하면, 마찬가지로 내부의 모든 엔티티는 준영속 상태가 된다. 또한 영속 상태의 엔티티가 준영속상태가 되는 경우 중 가장 많이 일어나는 경우로, 개발자가 직접 준영속 상태로 만드는 일은 드물다.

#### 3.6.4 준영속 상태의 특징
* **거의 비영속 상태**: 영속성 컨텍스트가 지원하는 기능을 받을 수 없다. 1차 캐시, 쓰기 지연, 변경 감지, 지연로딩 등
* **식별자 값이 있다**: 비영속 상태와 달리 준영속 상태는 영속상태에서 만들어지는 식별자 값이 있다.
* **지연로딩 불가**: 준영속 상태의 엔티티는 지연로딩을 통해 다른 엔티티 접근이 불가능하다.

#### 3.6.5 병합: `merge()`

준영속 상태의 엔티티를 영속상태로 만드는 방법은 병합이 있다. **단 병합의 경우, 준영속 상태의 정보로 새로운 엔티티를 반환한다**

```java
public class ExamMergeMain {
    static EntityManagerFactory emf =
            Persistence.createEntityManagerFactory("jpabook");

    public static void main(String args[]) {
        Member member = createMember("memberA", "회원");
        member.setUsername("회원명변경");
        mergeMember(member);
    }


    static Member createMember(String id, String username){
        //영속성 컨텍스트 1 시작
        EntityManager em1 = emf.createEntityManager();
        EntityTransaction tx1 = em1.getTransaction();
        tx1.begin();

        Member member = new Member();
        member.setId(id);
        member.setUsername(username);

        em1.persist(member);
        tx1.commit();

        em1.close(); // 영속성 컨텍스트1 종료

        return member; //준영속 상태의 엔티티를 리턴한다.
    }
    private static void mergeMember(Member member) {
        //영속성 컨텍스트2 시작
        EntityManager em2  = emf.createEntityManager();
        EntityTransaction tx2 = em2.getTransaction();

        tx2.begin();
        Member mergeMember = em2.merge(member);
        tx2.commit();

        //준영속 상태
        System.out.println("member = "+member.getUsername());

        //영속 상태
        System.out.println("mergeMember = "+
                mergeMember.getUsername());
        System.out.println("em2 contains member = "+
                em2.contains(member));
        System.out.println("em2 contains mergeMember = "+
                em2.contains(mergeMember));

        em2.close();
    }
}
```

##### 출력결과

```powershell
member = 회원명변경
mergeMember = 회원명변경
em2 contains member = false
em2 contains mergeMember = true
```

위 코드의 수행 결과에서 살펴 볼 부분은 다음과 같다.

* `createMember()`메소드가 반환한 `member`엔티티는 준영속 상태이다.
* `main()`메소드 안에서 실행한 `setUserName()`메소드는 준영속 상태의 엔티티에서 실행되어 반영되지 않는다.
* `mergeMember()` 메소드안에서 실행한 `merge()`메소드는 새로운 영속 상태의 엔티티를 반환한다. 그 결과로 출력결과에서 `member`엔티티는 `em2`에서 관리 되지 않음을 알 수 있다.
  * 추가적으로 `member`와 `mergeMember`에 대해 비교를 해보면 다름을 알 수 있다.

`merge()`소드의 동작방식은 다음과 같다.

1. `merge()`가 호출된다
2. 매개변수로 넘어온 준영속 엔티티의 식별자 값으로 1차 캐시에서 엔티티를 조회한다.
  1. 1차캐시에 엔티티가 없으면 DB에서 조회하여 1차캐시에 저장한다.
3. 조회한 엔티티에 매개변수로 넘어간 엔티티의 값으로 변경한다.
4. 결과를 반환한다.

실제로 DB에 변경된 값이 반영되는 것은 동일하게 `commit()`시점 이다. 마지막으로 병합 메소드는 준영속 엔티티 뿐만 아니라 **비영속 엔티티**에도 사용가능하다.

### 3.7 정리

* 엔티티 매니저 팩토리 → 엔티티 매니저로 생성할 수 있으며, 자바를 직접다루는 J2SE환경에서는 엔티티매니저 생성이 곧 영속성 컨텍스트와 동일하다.
* 영속성 컨텍스트는 DB와 애플리케이션 사이에서 객체를 보관하는 가상의 DB역할을 한다. 또한 1차캐시, 동일성 보장, 트랜잭션 지원하는 쓰기 지연, 변경감지, 지연로딩을 사용할 수 있게 한다.
* 영속성 컨텍스트의 내용의 DB반영은 플러시 시점에 일어나며, 일반적으로 플러시는 `commit()`시점이다.
* 엔티티는 영속, 준영속, 비영속의 생명주기를 가지며, 오직 영속상태에서만 영속성 컨텍스트가 관리한다.
