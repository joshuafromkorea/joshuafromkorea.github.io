---
layout: post
title: "이것이 자바다 self study - chapter 9"
date: 2018-12-15
categories:
---

실무에서 현재 많이 접하고 있는 중첩 클래스와 중첩 인터페이스. 자주쓰긴 하지만 명확한 문법도 잘 모르고, IDE가 고치라고하면 고치고, 냅두라고하면 냅두고 있다. 좀더 자바를 아는 개발자가 되려면 다시한번 봐야 하는 챕터

---

## Chapter 9 중첩 클래스와 중첩 인터페이스

### 9.1 중첩 클래스와 중첩 인터페이스란?

자바 프로그래밍에서 "중첩(Nested)" 이라는 단어가 가지는 의미는 클래스내부에 선언된다라는 의미를 가진다. 클래스 내부에 다음과 같이 또다른 클래스나 인터페이스가 선언될 수 있다.

```java
class SomeClass{
    class innerClass{
        
    }
    interface innerInterface{
        
    }
}
```

이렇게 선언된 클래스와 인터페이스의 목적은 클래스와 인터페이스 멤버들 사이에서는 긴밀하게 접근할 수 있으면서, 외부에는 불필요한 관계를 감출 수 있다는 장점이 있다.

> 중첩 인터페이스는 주로 UI 프로그래밍에서 이벤트를 처리할 목적으로 많이 활용된다. 예를 들어 안드로이드에서는 다음과 같이 `View`클래스의 클릭 이벤트를 처리하는 구현클래스를 만들 수 있도록 `View`클래스 내부에 `OnClickListener`라는 중첩 인터페이스를 가지고 있다.

```java
public class View{
    public interface OnclickListener{
        public void onClick(View v);
    }
}
```

### 9.2 중첩 클래스

중첩 클래스는 선언 위치에 따라서 아래와 같이 나뉜다.

| 분류                | 선언 위치                      | 설명 |
| ------------------- | ------------------------------ | ---- |
| 인스턴스 멤버클래스 | class A{<br />	class B{}<br />} | B객체 생성에, **A 객체 생성**이 필수 |
| 정적 멤버 클래스    | class A{<br />	static class B{}<br />} | B객체 생성시, **A클래스**로 접근 가능 |
| 로컬 클래스         | class A{<br />	void method(){<br />		class B{}<br />	}<br />} |      |

내부 클래스는 분류에 따라서 바이트 코드파일 (*.class)의 생성도 별도로 이뤄지며 다음과 같이 된다.

* **멤버클래스**: `바깥클래스$멤버클래스.class`
* **로컬클래스**: `바깥클래스$1로컬클래스.class`

#### 9.2.1 인스턴스 멤버 클래스

`static`키워드 없이 클래스의 멤버로 선언된 클래스로 자신의 멤버로 정적 필드와 메소드를 가질 수 없다. 내부 객체 생성을 위해서는 외부 클래스를 객체로 생성하는게 필수적이다.

#### 9.2.2 정적 멤버 클래스

`static` 키워드로 선언되며, 내부 멤버로 모든 종류의 필드와 메소드를 생성할 수 있다. 외부 클래스의 객체화 없이 내부 객체를 도트 연산자를 사용해 외부클래스를 통해 접근가능 하다.

```java
A.B b = new A.B();
```

#### 9.2.3 로컬 클래스

메소드안에 선언된 중첩 클래스로, 접근제한자와 `static`키워드는 사용불가능 하다. 오로지 소속된 메소드가 실행 될때만 객체 생성이 가능하고 사용할 수 있다.

### 9.3 중첩 클래스의 접근 제한

#### 9.3.1 바깥 필드와 메소드에서 사용 제한

```java
public class A {
    //인스턴스 필드
    B field1 = new B();
    C field2 = new C();
    
    //인스턴스 메소드
    void method1(){
        B var1 = new B();
        C var2 = new C();
    }
    
    //정적 필드 초기화
    static B field3 = new B(); //컴파일 에러!!
    static C field4 = new C();
    
    //정적 메소드
    static void method2(){
        B var1 = new B(); //컴파일 에러!!
        C var2 = new C();
    }
    
    //인스턴스 멤버 클래스
    class B{}
    
    //정적 멤버 클래스
    static class C{}
    
}
```

* 멤버 클래스는, 바깥 클래스의 인스턴스 필드와 메소드의 로컬 변수로 사용 가능하다
* **단,** `static` 필드나, `static` 메소드의 로컬변수로는, **정적 멤버 클래스**만 사용 가능 하다.

#### 9.3.2 멤버 클래스에서 사용 제한

멤버 클래스가 인스턴스냐 정적멤버냐에 따라 멤버클래스 내부에서 바깥 클래스의 필드와 메소드를 접근하는데에도 제한이 존재한다.

```java
public class OuterClass {
    int field;
    void method1(){}

    static int staticField;
    static void staticMethod(){}

    class instanceInner{
        void innerMethod(){
            field = 10;
            method1();

            staticField = 10;
            staticMethod();
        }
    }
    static class staticInner{
        void innerMethod(){
            field = 10; //컴파일 에러!!
            method1(); //컴파일 에러!!
            
            staticField = 10;
            staticMethod();
        }
    }
}
```

* 인스턴스 멤버 클래스는 바깥클래스의 모든 필드와 메소드에 접근 할 수 있다.
* **정적 멤버 클래스**는 바깥클래스의 정적 필드와 정적 메소드에만 접근된다.

#### 9.3.3 로컬 클래스에서 사용 제한

* 로컬 클래스는 바깥 클래스의 필드나 메소드를 제한 없이 사용할 수 있다.
* **로컬변수**나 **매개변수**를 로컬 클래스에서 사용할 때 문제가 발생한다.
  * 로컬변수 및 매개변수: **스택**에 존재하며 메소드 실행완료시 사라짐
  * 로컬 클래스 객체: **힙**영역에 존재해 계속 사용 가능

따라서 Java는 컴파일 시, 로컬 클래스에서 사용하는 로컬 변수나 매개변수를 로컬 클래스 내부에 **복사**하고 사용한다. 하지만 이렇게 되면 메소드의 로컬변수나 매개변수와, 로컬 클래스에 복사된 값이 달라지는 문제가 여전히 존재하기 때문에, 로컬 클래스 내부에 사용되는 외부메소드의 변수들은 `final`로 선언해야 **했다**.

Java 7까지는 아래와 같이 사용했어야만 했다.

```java
public class OuterClass {
    public void method1(final int arg){
        final int localVariable = 1;

        class LocalClass {
            public void method(){
                int result = arg +localVariable;
            }
        }
    }
}
```

Java 7까지는, `arg`와 `localVariable`은 로컬 클래스안에서 사용되기 때문에, 반드시 `final`로 선언되되야 한다. 다만 이 부분이 Java 8에서는 `final` 키워드를 제외해도 되게 변경되었다. 단 이는 컴파일 시점에 자동으로 컴파일러가 로컬 클래스에서 사용된 변수인지 파악하여 묵시적으로 `final`의 특성을 갖게 한다.

```java
public class OuterClass {
    //자바 8
    public void method2(int arg){
        int localVariable = 1;

        class LocalClass {
            public void method(){
                int result = arg +localVariable;
            }
        }
    }
}
```

`arg`와 `localVariable`이 `final`키워드를 가지지 않은 변수이지만, `final` 특성을 가지고 있기에 만약 해당 변수를 `outerMethod()` 내부에서 접근하려고 하면 `final` 특성이 사라지면서 컴파일 에러가 발생한다. (에러 발생 위치는 로컬 클래스에서 해당 변수 사용 하는 위치)

```java
public class OuterClass {
    public void outerMethod(int arg){
        int localVariable = 1;
		
        //메소드 내에서 로컬변수 및 매개변수 접근시 final 특성이 제거됨
        arg = 1; 
        localVariable =4; 

        class LocalClass {
            public void method(){
                int result = arg +localVariable; //여기서 컴파일 에러 발생
            }
        }
    }
}
```

그럼 메소드에서 사용되는 로컬변수와 매개변수에 `final`을 사용하는데에는 차이가 없을까? 앞서서 로컬 클래스에서 사용하는 외부메소드의 변수들은 서로 저장되는 메모리의 위치 차이를 해결하기 위해 컴파일러가 자동으로 **복사**해주는 기능을 지원한다고 했다. `final` 키워드의 유무는 이러한 복사 위치를 결정한다.

* `final` 키워드가 붙은 매개변수와 로컬변수는, 로컬클래스의 내부의 메소드 지역변수로 복사된다.
* 키워드가 붙지 않고 `final` 특성만을 갖는 경우에는 로컬클래스의 필드로 복사된다.

```java
void outMethod(final int finalArg, int defArg){
    final int finalVar = 1;
    int defVar = 2;

    class LocalClass{
        void method(){
            int result = finalArg+defArg+finalVar+defVar;
        }
    }
}
```

위와 같이 `outMethod()`의 매개변수와 로컬변수를 `LoacalClass`내부의 메소드에서 사용할 경우, 실제적으로 컴파일러는 아래와 같이 복사하게 된다. (실제 코드가 아닌 컴파일러가 변경해주는 부분)

```java
class LocalClass{
    /** 컴파일러가 복사해주는 부분 **/
    int defArg = 매개값;
    int defVar = 2;
    /****************************/
    void method(){
        /** 컴파일러가 복사해주는 부분 **/
        int finalArg = 매개값;
        int finalVar = 1;
        /****************************/
        int result = finalArg+defArg+finalVar+defVar;
    }
}
```

#### 9.3.4 중첩 클래스에서 바깥 클래스 참조 얻기

클래스 내부에서 `this`는 객체 자신의 참조이다. 따라서 중첩 클래스에서 `this`를 사용하게 되면, 중첩 클래스의 객체 참조가 된다. 바깥 클래스의 객체 참조를 하고자 할 때에는 바깥클래스와 `this`를 도트연산자 (`.`)로 연결해주면 된다.

```
바깥클래스.this.필드
바깥클래스.this.method();
```

### 9.4 중첩 인터페이스

인터페이스를 클래스 내부에 선언하는 이유는, 해당 클래스와 **긴밀한 관계를 맺는** 구현 클래스를 만들기 위해서이다. 특히 UI프로그래밍에서 이벤트를 처리할 목적으로 많이 활용된다.

```java
public class Button {
    OnClickListener listener;

    public void setListener(OnClickListener listener) {
        this.listener = listener;
    }
    
    void touch(){
        listener.onClick();
    }
    
    interface OnClickListener{
        void onClick();
    }
}
```

위는 UI프로그래밍에서, 중첩 인터페이스 타입을 필드로 하는 외부 클래스를 구현 하는 예제이다. `Button`클래스는 `OnClickListener`를 타입으로 하는 필드를 가지고 있고 접근자를 통해 다형성을 구현한다. 다만 해당 다형성을 하기 위한 `interface`를 클래스 내부에 작성함으로서 캡슐화를 하는 것이다.

### 9.5 익명 객체

익명 객체는 이름이 없이 생성한 객체를 말한다. 단독 생성은 불가능하고 클래스를 상속하거나 인터페이스를 구현 하는 방법으로만 생성할 수 있고, 일반적인 경우 필드의 초기값이나 로컬변수의 초기값, 매개변수의 매개값으로 바로 대입된다.

#### 9.5.1 익명 자식 객체 생성

다형성을 구현할 때 일반적으로는 부모 클래스 타입으로 필드나 변수를 생성하고, 자식 클래스를 인스턴스화 한 객체를 대입하는 것이 일반적이다. 그러나 자식클래스를 재사용하지 않고, **해당** 필드나 변수의 초기 값으로만 사용된다면, 익명 객체를 생성하는 것이 좋다. `new`연산자를 사용하여 부모타입 생성자를 호출함과 동시에 중괄호(`{}`)를 사용해서 자식 클래스를 선언할 수 있다. 중괄호 내부에는 동일하게 필드나 메소드 선언 및 오버라이딩을 하면된다. 익명 클래스 **외부에서는** 부모타입으로 선언된 타입이 가진 값만 접근 가능하다.

#### 9.5.2 익명 구현 객체 생성

상속에서와 같이 인터페이스의 구현도 익명객체로 가능하다. 사용목적은 익명 자식 객체와 같으며 선언 방식도 동일하다. 앞서서 살펴본 `Button` 클래스안의 중첩 인터페이스인 `OnclickListener`를 구현하는 예제를 살펴보자.

```java
public class View {
    Button button1 = new Button();
    Button button2 = new Button();
    
    //클래스 내부 필드에 익명 구현 객체 사용
    Button.OnClickListener listener = new Button.OnClickListener() {
        @Override
        public void onClick() {
            System.out.println("call");
        }
    };

    public View() {
        //매개변수에 익명 구현 객체 사용
        button2.setListener(new Button.OnClickListener() {
            @Override
            public void onClick() {
                System.out.println("send");
            }
        });
    }
}
```

#### 9.5.3 익명 객체의 로컬 변수 사용

9.3.3 에서 살펴본것과 같이 로컬 클래스의 객체가 가지는 스택 영역에 할당되는 로컬변수와 매개변수에 대한 처리는 익명 객체에서도 동일하게 발생한다. Java 7까지는 익명객체가 메소드의 매개변수나 로컬변수를 사용할 경우 해당 변수들이 `final`키워드로 사용해야 했지만, Java 8 이후로는 `final`특성을 컴파일러가 자동으로 부여해준다. 또한 동일하게 `final`의 여부는 컴파일러가 해당 변수를 익명 객체 내부의 어느영역에 복사하느냐를 결정한다. 자세한 내용은 9.3.3을 다시 살펴보면 된다.
