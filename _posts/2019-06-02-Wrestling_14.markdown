---
layout: post
title: "레퍼런스로 스터디하는 스프링 부트 14회차 정리"
date: 2019-06-02
categories:
---

13강에서의 `HttpMessageConverter`에 대한 분석이 맘에 들지 않았던 기선님은, 14강에서 레퍼런스에서는 설명해주지 않는 수준까지 파고드는 개발자의 궁금증과 해결을 위한 집착을 보여주신다. 해당내용도 그렇지만 자세를 배울 수 있었던 좋은 시간. 강의노트는 짧은편

---

##### 29.1.2 HttpMessageConverters  + 29.1.3 Custom JSON Serializers and Deserializers에 ~이어서

```java
@RestController
public class UserController {

    @Autowired
    HttpMessageConverters converters;

    @RequestMapping("/")
    public String index() {
        return "hello";
    }
}
```

*  위의 `@RestController`의 `/`경로를 호출할 때 응답하는 `hello` 또한 `HttpMessageConverter`를 사용한다.

  * `@RestController`의 주석 참조

  ```java
  * A convenience annotation that is itself annotated with
  * {@link Controller @Controller} and {@link ResponseBody @ResponseBody}.
  ```

  * 위의 경우에 어떠한 컨버터를 사용했는지는 **요청**과 **응답**하는 종류에 따라 **달라진다**
    * 브라우저를 통해서 호출했을 때에는 `StringHttpMessageConverter`를 사용
    * `curl` 명령을 통해 `application/json`으로 요청하면 json 컨버터 중 하나를 사용

* `User`라는 객체를 만들어서 리턴하는 컨트롤러를 만든 것에 대한 예시

  ```java
   @GetMapping("/user")
      public User currentUser(){
          User user = new User();
          user.setAge(34);
          user.setName("joshua");
          user.setHeight(160);
  
          return user;
  }
  ```

  * 이 경우, 브라우저, `curl` (header 없는 경우에도)로의 요청 모두  **json 컨버터를 동일하게 사용한다**.

* `User`객체에 `@XmlRootElement`를 넣어준 경우엔 브라우저로 호출 하면 XML형태로 응답한다.

  * `curl`로 요청시에는 `--header "Accept:application/xml` 필수

  ```xml
  <user>
  	<age>34</age>
  	<name>joshua</name>
  </user>
  ```

##### 29.1.4 MessageCodesResolver

* `MessageCodesResolver`는 Spring MVC가 에러 메시지를 에러코드로 표현하기 위해 사용하는 전략이다.
* `DefaultMessageCodesResolver.Format`에 선언된, 값을 `spring.mvc.message-codes-resolver.format`에 프로퍼티로 넣어주면 된다.

##### 29.1.5 Static Content

* 스프링부트는 아래의 디렉토리에 있는 static 컨텐츠를 제공해 준다.
  * `ServletContext`의 루트나 classpat 밑의 `/static` , `/public` , `/resources` , `/META_INF/resources`
* `ResourceHttpRequestHandler`를 사용하는데, 이를 `addResourceHandlers`메소드를  `WebMvcConfigurer`안에서 오버라이딩해서 사용하면 된다.

```java
@Configuration
public class  WebConfig implements WebMvcConfigurer {

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        //overidding code here
    }
}
```

* stand-alone 웹 어플리케이션에서는, 스프링에서 handling 하지 않도록 결정된 리소스에 대해서는, 컨테이너의 default servlet이 대비책으로 사용되어 `ServletContext`의 루트에 있는 리소스들을 사용할 수 있게 한다.

  * 대부분의 경우에, MVC 설정으로 강제하지 않는다면, 일어나지 않는다. 왜냐면 `DispatcherServlet`이 대부분 처리하기 때문이다.

* 리소스를 매핑하는 기본 값은 `/**`,이지만, `spring.mvc.statc-path-pattern` 프로퍼티를 통해 바꿀 수 있다. 

  ```properties
  spring.mvc.static-path-pattern=/static/**
  ```

  * 위의 경우엔 static 리소스에 접근하기 위해선 `/static/` 으로 접근해야한다
    * static 리소스를 **찾는 위치**가 아니라, 클라이언트의 **접근 경로**에 대한 변경이다.

*  static 리소스를 찾는 경로를 변경할 수 있다. `spring.resources.static-locations` 프로퍼티로 설정한다

  ```properties
  spring.resources.static-locations=classpath:/html
  ```

  * 위의 경우엔 기존의 `/static` 등에서 찾던 것을 /html 에서 찾을 수 있게 한다.
  * 루트 서블릿 conetext 경로로는 `"/"`로 자동 추가된다.
