---
layout: post
title: "레퍼런스로 스터디하는 스프링 부트 28-29회차 정리"
date: 2019-07-27
categories:
---

### 31. Working with SQL Databases

* 스프링 프레임워크 JDBC부터 ORM기술까지 지원한다.
* Spring Data는 `Repository`를 인터페이스에서 바로 구현해주고, 메소드 이름으로 쿼리를 만들어주는 기능등을 제공한다.

#### 31.1 Configure a DataSource

* 자바의 `javax.sql.Datasource` 인터페이스는 데이터베이스 연결을 위한 표준적인 방법을 제공한다.
  * 전통적으로 데이터소스는 `URL`과 인증을 사용해 데이터와 연결하는 방법을 사용한다.

#### 31.1.1 Embedded Database Support

* 어플리케이션을 개발하는 과정에서는 내장 인메모리 데이터베이스를 사용하는 것이 유용하다.

  * 어플리케이션 기동시에 데이터베이스를 초기화하고 준비하는 과정과, 종료시 폐기하는 과정이 필요하다

* 스프링부트는 H2, HSQL, Derby에 대한 자동설정을 할 수 있기 때문에, URL을 제공할 필요도 없고, 오로지 사용하길 원하는 데이터베이스에 대한 의존성 설정만 해주면 된다.

  * 내장 DB가 자동 설정되려면 `spring-jdbc`의 의존성이 필요하다. `spring-boot-starter-data-jpa`를 추가하는 것으로 대체할 수 있다.

  ```xml
  <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
  </dependency>
  <dependency>
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <scope>runtime</scope>
  </dependency>
  ```

---

#### 85.3 Initialize a Databse

* Spring Boot는 자동으로 DDL 스크립트와 DML 스크립트를 읽어서 `DataSource`를 생성하고 초기화 해준다.
  * 클래스패스에 존재하는 `schema.sql`과 `data.sql`을 사용한다.
  * 추가적으로 `schema-${platform}.sql` 과 `data-${platform}.sql` 파일을 통해 플랫폼에 특화된 초기화도 가능하게 해준다.

---

#### 31.1.2 Connection to a Production Database

* `DataSource` Pooling을 사용해서 상용 DB에 대한 커넥션도 자동으로 설정할 수 있으며, 아래의 알고리즘을 따라서 특정한 구현을 선택한다.
  1. [HikariCP](https://github.com/brettwooldridge/HikariCP)가 가진 성능과 동시성 보장으로 인해, 가능하면 HikariCP를 사용한다.
  2. 그렇지 않으면 Tomcat pooling `DataSource`가 있으면 사용한다.
  3. 둘다 존재 하지 않고, [Commons DBCP2](https://commons.apache.org/proper/commons-dbcp/)를 사용할 수 있으면 사용한다.
* 만약에 `spring-boot-starter-jdbc`나 `spring-boot-starter-data-jap`를 사용하는 경우엔, 자동으로 `HikariCP`가 의존성에 추가된다.
  * `spirng.datasource.type` 프로퍼티에 값을 주는 방법으로 이 알고리즘을 우회할 수 있다.
  * 또한 메뉴얼한 `DataSource`설정을 하는 Bean을 만드는 경우엔 자동설정은 무시된다.
* DataSource에 대한 설정은 외부 프로퍼티 파일을 통해서 아래와 같이 설정할 수 있다.

  * 만약 `url`값이 존재하지 않는다면, 스프링부트는 자동으로 메모리 DB를 활성화 시킬 것이다.
```properties
spring.datasource.url=jdbc:mysql://localhost/test
spring.datasource.username=dbuser
spring.datasource.password=dbpass
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
```

*  `spring.datasource.hikari.*`, `spring.datasource.tomcat.*`, `spring.datasource.dbcp2.*`와 같은 접두사를 사용한 프로퍼티 설정으로 각 connection pool 설정을 할 수 있다.

```properties
# Number of ms to wait before throwing an exception if no connection is available.
spring.datasource.tomcat.max-wait=10000

# Maximum number of active connections that can be allocated from this pool at the same time.
spring.datasource.tomcat.max-active=50

# Validate the connection before borrowing it from the pool.
spring.datasource.tomcat.test-on-borrow=true
```

#### 31.2 Using JdbcTemplate

* 스프링의 `JdbcTemplate`과 `NamedParameterJdbcTemplate` 은 자동으로 설정 되기 때문에 `@Autowire`하여서 사용할 수 있다.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Component
public class MyBean {

	private final JdbcTemplate jdbcTemplate;

	@Autowired
	public MyBean(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	// ...

}
```

* 스프링 JDBC 템플릿에 대한 설정도 아래와 같이 할 수 있다.

```properties
spring.jdbc.template.max-rows=500
```

