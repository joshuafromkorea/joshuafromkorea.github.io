---
layout: post
title: "레퍼런스로 스터디하는 스프링 부트 9회차 정리"
date: 2019-05-04
categories:
---

`*.properties` 파일과 유사한 YAML 파일에 대한 내용과 Admin 기능에 대한 내용

9강 강의링크: [**YAML 사용하기**](https://youtu.be/m7j6ysAW5rc)

9강 레퍼런스: [**24.7**](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#boot-features-external-config-yaml)

---

#### 24.7 Using YAML Instead of Properties

**[YAML](https://yaml.org/)**은 간편하게 계층구조의 설정 정보를 표현할 수 있는 JSON구조의 언어로, `SpringApplication` 클래스는 [SnakeYAML](https://bitbucket.org/asomov/snakeyaml)을 클래스패스에 포함하면, 자동적으로 프로퍼티 파일을 대체할 수 있도록 지원한다. 

##### 24.7.1 Loading YAML

스프링 프레임워크는 YAML 문서를 읽기 위해서 두개의 편의 클래스를 제공한다

* `YamlPropertiesFactoryBean` : `Properties` 형태로 읽는다
* `YamlMapFactoryBean`: `Map` 형태로 읽는다.

아래와 같은 YAML 문서는,

```yaml
environments:
	dev:
		url: http://dev.example.com
		name: Developer Setup
	prod:
		url: http://another.example.com
		name: My Cool App
```

애래의 프로퍼티로 변환이 된다.

```properties
environments.dev.url=http://dev.example.com
environments.dev.name=Developer Setup
environments.prod.url=http://another.example.com
environments.prod.name=My Cool App
```

YAML이 지원하는 **list**는 `[index]`를 가진 프로퍼티로 바뀐다.

```yaml
my:
servers:
	- dev.example.com
	- another.example.com
```

```properties
my.servers[0]=dev.example.com
my.servers[1]=another.example.com
```

스프링부트의 `Binder` 유틸리티들을 통해서, 

##### 24.7.2 Exposing YAML as Properties in the Spring Environment

`YamlPropertySourceLoader` 를 사용하면, 스프링 `Environment`의 YAML을 `PropertySource` 로 노출 시킬 수 있으며, 이를통해 `@Value` 어노테이션을 통해 YAML 설정에 접속된다.

##### 24.7.3 Multi-profile YAML Documents

`properties` 파일과 유사하게, YAML도 "*profile-speicific*"한 설정을 하나의 파일에 `spring.profiles`를 키로 사용하는 방식으로 아래의 예제와 같이 지원한다.

```yaml
server:
	address: 192.168.1.100
---
spring:
	profiles: development
server:
	address: 127.0.0.1
---
spring:
	profiles: production & eu-central
server:
	address: 192.168.1.120
```

위의 예제는 실행시에 어떠한 profile이 **활성화**되어 있는지에 따라서, `server.address` 프로퍼티가 달라지는 결과를 낳는다. 가장 위의 값은 어떠한 프로파일도 활성화 되지 않았을 때에 사용될 것이고, `production`**과**`eu-central`이 **동시에** 활성화 되었을 때에는, `192.168.1.120`값이 사용될 것이다.

만약에 어플리케이션 어떠한 profile도 명시적으로 활성화 되어있지 않다면, "default" profile들이 활성화된다. default profile에 대한 값도 아래의 예제처럼 설정할 수 있다.

```yaml
server:
  port: 8000
---
spring:
  profiles: default
  security:
    user:
      password: weak
```

"default" 프로파일로 설정하는 것과, 아무런 프로파일로 설정하지 않은 YAML 문서 값의 차이는, 전자는 아무런 프로파일이 없는 경우에만 설정된 다는 것이고, **후자는 어떠한 프로파일에도 설정된 뒤 변경된다는 것이다.**

`!` 문자를 사용해서, profile의 부정상태에 사용되도록 설정할 수 있다. `  profiles: !test`

##### 24.7.4 YAML Shortcomings

YAML파일은 `@PropertySource` 어노테이션으로 읽을 수 없기 때문에, 이경우에는 properties 파일을 사용해야 한다. 또한 단일 파일에 

#### 24.8 Type-safe Configuration Properties

`@Value("${property}")`의 어노테이션을 통해 프로퍼티들을 읽고 주입하는 작업은 번거로울 수 있기 때문에, 스프링부트는  타입화된 Bean들이 어플리케이션의 설정을 제어하고 검증할 수 있도록 하는 방법을 제공한다.

###### `@ConfigurationProperties`을 사용하는 레퍼런스 예제

```java
@ConfigurationProperties("acme") //acme.*로 시작하는 프로퍼티는 아래로 매핑
public class AcmeProperties {

	private boolean enabled; //acme.enabled
	private InetAddress remoteAddress;
	private final Security security = new Security();
	public boolean isEnabled() { ... }
	public void setEnabled(boolean enabled) { ... }
	public InetAddress getRemoteAddress() { ... }
	public void setRemoteAddress(InetAddress remoteAddress) { ... }
	public Security getSecurity() { ... }
    
	public static class Security {
		private String username;
		private String password;
		private List<String> roles = new ArrayList<>(Collections.singleton("USER"));
		public String getUsername() { ... }
		public void setUsername(String username) { ... }
		public String getPassword() { ... }
		public void setPassword(String password) { ... }
		public List<String> getRoles() { ... }
		public void setRoles(List<String> roles) { ... }
	}
}
```

* `acme.enabled`의 경우 default 값은 `false`이다

* `acme.remote-address`는 `String`을 형변환 해준다.

* getter 와 setter 는 일반적으로 필수이지만, 생략가능한 경우들이 있지만, 생략해서 혼란을 불러 일으킬 수 있으니, 사용하지 않는 것이 낫다.

* `Collection` 타입의 객체는 immutable로 만들지 말아야 한다.

* `@Value`와 `@ConfigurationProperties`의 차이는 **24.8.6**을 참고

* `@ConfigurationProperties`를 사용한 클래스는 아래와 같이 **등록**해야 한다.

  * `@EnableConfigurationProperties` 을 `@Configuration`에 사용

    ```java
    @Configuration
    @EnableConfigurationProperties(AcmeProperties.class)
    public class MyConfiguration {
    }
    ```

  * `@Component`와 `@ConfigurationProperties`병행

  ```java
  @Component
  @ConfigurationProperties(prefix="acme")
  public class AcmeProperties {
  }
  ```

* 위와 같이 등록된 bean은 정의된 명명 규칙을 따른다 `<prefix>-<fqn>`

  * `<prefix>`는 어노테이션의 어트리뷰트로 등록가능함
  * `<fqn>`은 패키지를 포함한 클래스의 전체 이름
  * `<prefix>`r가 없으면 `<fqn>`만 사용된다.

* `@ConfigurationProperties`가 bean이 되어도, 다른 bean을 DI 받지마라.

* `properties` 파일 뿐만 아니라 `SpringApplication`의 외부 YAML 설정도 되며, 아래의 예제처럼 `Environemnt` bean에서 접근 가능하다.

###### `application.yml` : YAML 설정파일

```yml
spring:
  profiles: default
joshua:
  name: kiwon default
  myPojo:
    - name: my name
      desc: my desc
    - name: another name
      desc: another desc
```

###### `JoshuaProperties.java` : 프로퍼티 type-safe 객체

```java
@ConfigurationProperties("joshua")
public class JoshuaProperties {

    private String name;

    private List<MyPojo> myPojo;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<MyPojo> getMyPojo() {
        return myPojo;
    }

    public void setMyPojo(List<MyPojo> myPojo) {
        this.myPojo = myPojo;
    }
}
```

###### `Example.java` : 실행 파일

```java
@RestController
@SpringBootApplication
@EnableConfigurationProperties(JoshuaProperties.class)
public class Exmaple {

    @Autowired
    Environment environment;

    @Autowired
    JoshuaProperties joshuaProperties;

    @RequestMapping("/")
    String home(){
        //Environment 에서 접근 (리스트 접근 방식에 주의)
        System.out.println(environment.getProperty("joshua.name"));
        System.out.println(environment.getProperty("joshua.myPojo[0].name"));
        System.out.println(environment.getProperty("joshua.myPojo[0].desc"));
        System.out.println(environment.getProperty("joshua.myPojo[1].name"));
        System.out.println(environment.getProperty("joshua.myPojo[1].desc"));
        System.out.println("================================================");
        //type-safe 객체에서 접근
        System.out.println(joshuaProperties.getName());
        System.out.println(joshuaProperties.getMyPojo().get(0).getName());
        System.out.println(joshuaProperties.getMyPojo().get(0).getDesc());
        System.out.println(joshuaProperties.getMyPojo().get(1).getName());
        System.out.println(joshuaProperties.getMyPojo().get(1).getDesc());
        return helloService.getMeassage();
    }
}
```

###### `("/")` 접속시 출력 결과

```shell
kiwon default
my name
my desc
another name
another desc
================================================
kiwon default
my name
my desc
another name
another desc

```

