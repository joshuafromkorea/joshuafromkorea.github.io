---
layout: post
title: "레퍼런스로 스터디하는 스프링 부트 10회차 정리"
date: 2019-05-04
categories:
---

계속 이어서 외부 프로퍼티의 바인딩과 관련된 내용을 마무리 짓는다.

10강 강의링크: [**@ConfigurationProperties의 여러 장점과 유일한 단점**](https://youtu.be/0QUNXpRHVVM)

10강 레퍼런스: [**24.8**](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#boot-features-external-config-typesafe-configuration-properties)

---

##### 24.8.1 Third-party Configuration

`@ConfigurationProperties`를 클래스에 선언해서 해당 클래스를 설정을 담은 type-safe 한 bean으로 만들었던 것과 유사하게, **public** `@Bean`메소드에 병용할 수 있는데, 이 방법은 서드파티 Configuration을 사용할 때 효과적이다.

```java
@Bean
@ConfigurationProperties("joshua")
public JoshuaProperties joshuaProperties(){
    return new JoshuaProperties() ;
}
```

위의 예제는, `joshua` prefix를 가진 프로퍼티들이, `AnotherComponent` bean의 필드로 매핑된다. 기존에 클래스에 선언했던, 어노테이션과 bean 등록 어노테이션을 제외해도 정상적으로 동일하게 작동된다.

##### 24.8.2 Relaxed Binding

`Environment` 프로퍼티들을 `@ConfigurationProperties` bean에 바인딩할 때 **유연한 규칙**을 적용하기 때문에, bean의 프로퍼티의 이름과 `Environment`에 프로퍼티 이름과 일치하지 않아도 유연하게 적용된다. 

예를들어, dash(`-`)로 표현되는 `Environment` 프로퍼티와 카멜표기법으로 선언된 멤버변수간의 매칭을 지원한다. 대소문자간의 매칭도 지원한다.

```java
@ConfigurationProperties(prefix="acme.my-project.person")
public class OwnerProperties {

	private String firstName;

	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

}
```

위 예제코드의 `firstName` 필드에 아래의 프로퍼티들이 모두 매핑될 수 있다.

**Table 24.1. relaxed binding**

| Property                            | Note                                                         |
| ----------------------------------- | ------------------------------------------------------------ |
| `acme.my-project.person.first-name` | Kebab case, which is recommended for use in `.properties` and `.yml` files. |
| `acme.myProject.person.firstName`   | Standard camel case syntax.                                  |
| `acme.my_project.person.first_name` | Underscore notation, which is an alternative format for use in `.properties` and `.yml` files. |
| `ACME_MYPROJECT_PERSON_FIRSTNAME`   | Upper case format, which is recommended when using system environment variables. |

* `@ConfigurationProperties`의 `prefix` 어트리뷰트에 들어가는 값은 kebab case이어야 한다.

**Table 24.2. 프로퍼티의 소스에 따른 바인딩**

| 프로퍼티 소스   | Simple                                                       | 리스트                                                       |
| --------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |
| `*.properties`  | Camel case, kebab case, or underscore notation               | `[ ]`를 사용하는 표준 리스트 문법 혹은  컴마로 구분된 값들   |
| `*.yml`         | Camel case, kebab case, or underscore notation               | 표준 YAML 리스트 문법 혹은 컴마로 구분된 값들                |
| 환경변수        | Upper case format with underscore as the delimiter. `_` should not be used within a property name | underscore로 감싸진 숫자`MY_ACME_1_OTHER = my.acme[1].other` |
| 시스템 프로퍼티 | Camel case, kebab case, or underscore notation               | `[ ]`를 사용하는 표준 리스트 문법 혹은  컴마로 구분된 값들   |

* 레퍼런스에서는 가능하면 `my.property-name=acme`와 같은 소문자 kebab 스타일을 쓰라고 한다.
* `Map`프로퍼티를 연결할 때에는, key의 경우 영문, 숫자, 그리고 `-`를 제외한 문자는 제거 되기 때문에 아래와 같이 `[]`로 감싸서 사용해야 한다.

```yaml
acme:
  map:
    "[/key1]": value1	#/key1 가 키가됨
    "[/key2]": value2	#/key2 가 키가됨
    /key3: value3		#key3 가 키가됨
```

##### 24.8.3 Merging Complex Types

리스트 형태의 프로퍼티가 한 곳이상에서 사용된 경우, 전체 리스트가 교환되는 방법으로 오버라이딩된다.

```java
@ConfigurationProperties("acme")
public class AcmeProperties {

	private final List<MyPojo> list = new ArrayList<>();

	public List<MyPojo> getList() {
		return this.list;
	}

}
```

위와 같은 `@ConfigurationProperties` 객체가 있다고 할때, 아래의 YAML 설정은 활성화된 프로필에 따라 `list` 내부의 값이 오버라이딩 된다.

```yaml
acme:
  list:
    - name: my name
      description: my description
    - name: another name
      description: another description
---
spring:
  profiles: dev
acme:
  list:
    - name: my another name
```

즉, `dev` 프로파일이 활성화 된경우에는 list의 길이는 0이고, `description`은 `null`이 들어간 `MyMojo` 객체가 하나 존재하게 된다.

`Map`형태의프로퍼티의 경우에도 리스트와 같이 가장 높은 우선순위의 프로퍼티로 오버라이딩 된다.

##### 24.8.4 Properties Conversion

* 스프링 프레임워크는 외부소스의 프로퍼티들은 `@ConfigurationProperties` bean으로 매핑할때, **알맞은 타입**으로 변환하려고 시도한다.
* 기본 바인딩 이외의 커스터마이징한 바인딩을 제공하고 싶으면 아래의 3가지 방법이 있다.
  * `ConversionService` bean
  * `CustomEditorConfigurer`를 통한 커스텀 프로퍼티 에디터
  * `@ConfigurationPropertiesBinding` 어노테이션을 통한 커스텀 `Converters`

###### Converting durations

스프링 부트는 **기간**(duration)표현에 특화된 지원을 제공하는데, `java.time.Duration` 프로퍼티를 사용하면 아래의 형식들을 사용할 수 있다.

* 일반적인 `long`을 사용한 표현법. (`@DurationUnit`을 사용하지 않을 경우 기본적으로 **밀리초**)
* ISO-8601 표준 형식을 따르는 [`java.util.Duration`](https://docs.oracle.com/javase/8/docs/api//java/time/Duration.html#parse-java.lang.CharSequence-)
* 단위와 값이 동시에 표현된 가독성이 좋은 형식 (예. 10초의 의미를 가지는 `10s`)

```java
@Component
@ConfigurationProperties("time")
public class DurationProperties {

    private Duration firstDuration = Duration.ofMinutes(3);
    private Duration secondDuration;

    public Duration getFirstDuration() {
        return firstDuration;
    }

    public void setFirstDuration(Duration firstDuration) {
        this.firstDuration = firstDuration;
    }

    public Duration getSecondDuration() {
        return secondDuration;
    }

    public void setSecondDuration(Duration secondDuration) {
        this.secondDuration = secondDuration;
    }
}
```

```properties
time.firstDuration = 30s
time.secondDuration = 2h
```

위의 예제의 경우,  `firstDuration`은 기본값으로 3분을 가지고 있지만, 프로퍼티 파일에서 `30s`로 주었기 때문에 변경되며, `secondDuration`의 경우엔 2시간이 바인딩된다. 

추가적으로, 프로퍼티에서 사용가능한 시간단위는 다음과 같다.

- `ns` for nanoseconds
- `us` for microseconds
- `ms` for milliseconds
- `s` for seconds
- `m` for minutes
- `h` for hours
- `d` for days

###### Converting Data Sizes

스프링프레임워크는 데이터 사이즈에 대한 표현을 위한 `Datasize`라는 타입을 지원하는데, 해당 타입에도 프로퍼티를 통해 값을 바인딩 할 수 있다.

* 일반적인 `long` 타입의 표현(`@DataSizeUnit`으로 따로 명시하지 않으면 bytes 가 기본 값)
* 읽기편한 대체 표현
  * `B` for bytes
  * `KB` for kilobytes
  * `MB` for megabytes
  * `GB` for gigabytes
  * `TB` for terabytes

##### 24.8.5 @ConfigurationProperties Validation

`@ConfigurationProperties` 클래스에 `@Validated` 어노테이션을 사용하면, 스프링부트는 해당 클래스에 대한 검증을 한다. 아래와 같이 해당 클래스내의 필드에 대해서 제약 어노테이션을 사용하면 그 내용들이 적용된다.

```java
@ConfigurationProperties(prefix="acme")
@Validated
public class AcmeProperties {

	@NotNull
	private InetAddress remoteAddress;

	// ... getters and setters

}
```

* `@Validated`는 클래스 뿐만 아니라 `@ConfigurationProperties`가 병용된 `@Bean` 메소드에도 사용된다.
* 내부 클래스로 만드는 내부 프로퍼티에도 `@Valid` 어노테이션을 사용해 적용할 수 있다.

```java
@ConfigurationProperties(prefix="acme")
@Validated
public class AcmeProperties {

	@NotNull
	private InetAddress remoteAddress;

	@Valid
	private final Security security = new Security();

	// ... getters and setters

	public static class Security {

		@NotEmpty
		public String username;

		// ... getters and setters

	}

}
```

* `configurationPropertiesValidator`라는 이름의 Bean 정의를 통해  `Validator` 커스터마이징 가능하다.
  * [예제 링크](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-samples/spring-boot-sample-property-validation)

##### 24.8.6 @ConfigurationProperties vs. @Value

`@Value`에 비해 "type-safe"  `@ConfigurationProperties`는 여러 기능을 가지고 있다.


| 기능                                                         | `@ConfigurationProperties` | `@Value` |
| ------------------------------------------------------------ | -------------------------- | -------- |
| [Relaxed binding](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#boot-features-external-config-relaxed-binding) | Yes                        | No       |
| [Meta-data support](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#configuration-metadata) | Yes                        | No       |
| `SpEL` evaluation                                            | **No**                     | **Yes**  |

* `@Value`는 "**매우 순수한**" 형태로 바인딩이 된다 by 백기선님
* `@Value`는 유연한 바인딩을 지원하지 않아 환경변수 값을 바인딩 받기에 좋지 않다.
* 따라서 직접 POJO를 만들고 `@ConfigurationProperties` 어노테이션을 사용하는게 낫다.

