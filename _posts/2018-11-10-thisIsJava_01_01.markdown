---
layout: post
title: "이것이 자바다 self study - chapter 1"
date: 2018-11-10
categories:
---
# _이것이 자바다_ self study

작성일: 2018년 11월 10일

## Chapter 1 자바 시작하기

해당 챕터에서는 수많은 Java 입문서에서 볼 수 있는 Programming Language에 대한 소개와, 그 중에 Java가 가지는 특징 과 역사를 소개하며 시작한다. 우리회사에서 신입 면접을 진행할 때 학부 때 Java를 했다는 친구들에게 흔히 물어보는 질문들에 대한 매우 정석적인 대답들이 담겨 있다.

### 1.2 자바란?

#### 1.2.2 자바의 특징

- 이식성이 높은 언어이다.

  > 소스 파일을 다시 수정하지 않아도, 자바 실행 환경이 설치되어 있는 모든 운영체제에서 실행 가능하다.

- 객체지향(OOP) 언어이다 .

  - 대부분의 면접자들이 Java에 대해서 설명해보라고 하면, 그 대답의 시작으로 하는 문장이다, 하지만 이 의미에 대해서 확실하게 이해하고 Java를 사용하는 개발자가 되는 것은 또 다른 의미이다. 객체지향프로그래밍 특징을 가장 잘표현(혹은 구현) 하는 _**[Tell, Don't Ask 원칙](https://pragprog.com/articles/tell-dont-ask#SHARP)**_을 창피하게도 나도 최근에야 알게 되었다. 책의 저자는 Java에 대해서 아래와 같이 말하고 있다.

  > 자바는 100% 객체지향 언어이다 ... (중략)... 객체 지향 언어가 가져야 할 캡슐화, 상속, 다형성 기능을 완벽하게 지원하고 있다.

- 함수적 스타일 코딩을 지원한다.

  - 이는 Java 8의 람다식 지원에 대한 부분이다

- 메모리를 자동으로 관리한다.

  - C++을 예로 들면서 Java의 GC 기능을 이야기 하고 있다. 처음 프로그래밍 수업을 학원에서 들을 때 강사님께서 프로그래밍 언어라는 것을 소개하시기 위해 C를 설명해 주었을 때와 컴공과로 편입을 잠시 준비하면서 자료구조 공부를 C로 했을때 `alloc` 등의 함수를 사용해서 메모리 관리를 하는 부분이 있었던 것을 제외하면 나는 지금까지 **메모리 관리**에 대해 별달리 고민해본적이 없다. Java만 했기 때문이다.

- 다양한 애플리케이션을 개발할 수 있다.

  - 실제로 학원 수강할 때 강사님께서 이걸 보여주기 위해서 콘솔용 CUI 프로그램, Swing을 활용한 GUI 프로그램, 그리고 Java EE까지 다 알려주셨다. 강사님 감사합니다. 현재 나는 Java EE로 서버용 애플리케이션을 개발하고 있다.

- 멀티 스레드(Multi_Thread)를 쉽게 구현할 수 있다.

  - 스레드에 대한 개념, 그리고 입문서적인 수준에서 어떻게 그것을 사용하는지는 몇번이나 배워왔는데 실무에서 활용해본적이 없다. 책의 저자가 말한 아래 내용을 책에서 명확하게 익히길 되기를 희망한다.

  > 하나의 프로그램이 동시에 여러 가지 작업을 처리해야 할 경우와 대용량 작업을 빨리 처리하기 위해 서브 작업으로 분리해서 병렬처리하려면 멀티 스레드 프로그래밍이 필요하다.

- 동적 로딩(Dynamic Loading)을 지원한다

  - 객체가 어플리케이션 실행 시점이 아니라 필요한 시점에 동적으로 로딩하고, 유지보수시 전체를 다시 컴파일 할 필요가 없다는 점을 말한다. Java만 주로 사용해서 이부분을 확 체감하지 못해서 구글링을 더 해본결과 동적로딩을 통해 아래와 같은 코드도 실행가능함을 설명하고 있다.

  ```java
  URLClassLoader classLoader = URLClassLoader.newInstance(
     new URL[]{"http://example.com/javaClasses.jar"});
  Class<?> clazz = classLoader.load("com.example.MyClass");
  ```

- 막강한 오픈소스 라이브러리가 풍부하다

  - 일단 저자는 자바가 "오픈소스언어" 임을 이야기 하고 있는데, 이말의 의미가 모호하다, 작성한 내용이 모두다 공개되는 언어도 아니고, 어떤의미로 사용한건지는 모르겠지만, 일단 Java 사용자가 많은 주류 언어이기 때문에 다양한 오픈 소스 라이브러리를 사용하기에 국내에서는 적어도 유리한 언어라는 의미로 이해했다

#### 1.2.3 자바 가상 기계(JVM)

앞서 설명한 Java의 **높은 이식성**을 실현시켜주는 것이 바로 Java Virtual Machine이다. Java의 소스 파일 `*.java`를 Java의 컴파일러를 통해 컴파일 하면 **Byte Code 파일**`*.class` 가 만들어 진다, JVM의 역할은 자신이 실행되고 있는 OS에서 실행할 수 있는 기계어로 바꿔준다고 이해하면 된다. 따라서 Java가 말하는 WORA(Write once, run anywhere)를 실현시키는 핵심이다. JVM 보통 우리가 JRE나 JDK를 설치하면서 설치하게 된다.

### 1.3 자바 개발 환경 구축

#### 1.3.1 자바 개발 도구(JDK) 설치

책에는 JDK 설치의 경우 일반적인 사용자에게 익숙한 Windows 환경을 예로 들고 있다. 내가 주로 스터디하는 집 데스크탑(Windows 7) 환경에는 이미 JDK가 설치되어 있기 때문에, 이외에 회사나 카페등에서 공부할 때 사용하는 개인 랩탑(Linux Mint 19) 환경에서 JDK 설치를 진행하였다. 아래의 명령어로 진행하면 되며, 리눅스 환경에서의 JDK 설치는 구글링하면 매우 많이 나와있다.

```shell
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer
```

이어서 나오는 내용은 자바 환경변수 설정이다. 학원수강, 신입사원 교육, 그리고 개발팀 전배 후 개발자 메뉴얼에서 이유도 알지 못한채 지겹게 따라 했던 내용인데 자바 환경변수 설정이 필요한 이유는 다음과 같다.

- 자바 개발시 자바 컴파일러(javac)와 자바 가상 기계(JVM)은 빈번하게 실행된다.
- 해당 구동 명령어는 JDK의 내부에 **bin 디렉토리**에 설정되어 있다.
- 이 명령어를 다른 디렉토리에서도 동일하게 실행하기 위해서 하는 것이 환경변수 설정이다.

동일하게 환경변수 설정도  Linux Mint 19 환경에서 진행하였다

1. javac 설치 확인을 하고

```powershell
joshua@Ideapad:~$ javac -version
javac 1.8.0_181
```

1. which` 명령어로 javac의 위치를 찾는다 (실행파일의 위치를 찾음)

```powershell
joshua@Ideapad:~$ which javac
/usr/bin/javac
```

1. `readlink -f` 명령어로 [심볼릭링크](https://zetawiki.com/wiki/%EC%8B%AC%EB%B3%BC%EB%A6%AD_%EB%A7%81%ED%81%AC)의 원본을 찾는다.

```powershell
joshua@Ideapad:~$ readlink -f /usr/bin/javac
/usr/lib/jvm/java-8-oracle/bin/javac
```

1. `/etc/environment` 파일을 열어서 아래 내용을 새로운 줄에 추가한다. (`/etc/profile` 이 아님에 유의)

```shell
JAVA_HOME="/usr/lib/jvm/java-8-oracle/"
```

1. 제대로 설정됬는지 확인하면 끝!

```powershell
joshua@Ideapad:~$ echo $JAVA_HOME
/usr/lib/jvm/java-8-oracle/
```

책에서는 일단 이게 잘 설정 되었으면 윈도우 기준으로 콘솔에서 `javac -version` 명령어가 제대로 수행되어야 한다고 하는데, 리눅스에서는 해당 설정과 관계없이 해당 명령어 수행에 문제가 없었기에 아마도 기존 Linux Mint 설치시에 openjdk가 설치되어 있었고,`environment`문서에 해당 path가 등록되어있던게 아닌가 싶다.

### 1.4 자바 프로그램 개발 순서

#### 1.4.1 소스 작성에서 부터 실행까지

앞 부분에서 했던 JDK설치와 환경변수 설정에 대한 검증차원에서, IDE를 사용하지 않고 간단한 자바 프로그램을 만들어보는 부분이다. Java 소스파일(`*.java`)을 메모장으로 작성하고, 이를 콘솔에서 바이트코드(`*.class`)로 생성 후 `java` 명령어로 실행하는 것이다. 동일하게 리눅스 콘솔환경에서 시행해보았다.

1. `Hello.java` 파일 생성

```powershell
joshua@Ideapad:thisIsJava$ vi Hello.java
```

1. 소스파일 내용 입력

```java
public class Hello{
	public static void main(String[] args){
		System.out.println("Hello, welcome to the java world!");
	}
}
```

1. 컴파일 후 생성된 바이트코드 파일 확인

```powershell
joshua@Ideapad:thisIsJava$ vi javac Hello.java
joshua@Ideapad:thisIsJava$ ls
Hello.class  Hello.java
```

1. 바이트코드 `java` 명령어로 실행

```powershell
joshua@Ideapad:thisIsJava$ java Hello
Hello, welcome to the java world!
```

책에서 저자의 예제와 동일한 명령어로 소스 컴파일 및 실행할 수 있었다. 이를 통해 Java의 WORA원칙을 간접적으로 체험할 수 있었다. 아마 리눅스 환경에서 작성한 Hello.java 파일을 집에 있는 데스크탑에서 컴파일 한다고 할지라도 동일하게 작동할 것이다.

#### 1.4.2 프로그램 소스 분석

Java 소스 안에서 클래스 블록과 메소드 블록에 대한 설명이 나온다. JVM이 `main()` 메소드를 "프로그램 실행 진입점(entry point)"로 삼는다는 내용이다

### 1.5 주석과 실행문

Java의 주석 사용법 두가지 즉, `//` 와 `/* ~ */` 에 대해서 설명하고 있으며, 소스의 모든 실행문에는 세미콜론`;`이 필요함을 이야기하고 있다.

### 1.6 이클립스 설치

책의 저자는 앞으로의 진행을 위해 IDE 설치 과정을 소개하는데, 선택한 환경은 Eclipse이다. 나의 경우에는 직장에서 Eclipse를 사용하기도 하고, 교육용으로는 IntelliiJ IDEA를 사용하는데에 라이선스상 문제가 없기 때문에 집의 데스크탑 및 랩탑 환경 모두 IDEA를 활용할 예정이다. 