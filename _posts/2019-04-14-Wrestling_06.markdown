---
layout: post
title: "레퍼런스로 스터디하는 스프링 부트 6회차 정리"
date: 2019-04-13
categories:
---

지금까지 스프링 부트 어플리케이션의 기본적인 부분을 중심으로 어떻게 부트 어플리케이션을 시작할 것인가에 대해서 알아보았고, 5강부터는 레퍼런스의 **Part IV.**가 시작되어 스프링부트의 각 기능의 상세를 살펴본다. 이부분을 바로 봐도되고, 상용환경에 대한 부분으로 스킵해도 된다고 하는데 일단 강의는 순서대로~

5강 강의링크: [**배너 그리고 SpringApplication**](https://youtu.be/38UK7BRJf1o)

5강 레퍼런스: [**23 ~ 23.5**](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#boot-features)

---

### 23. SpringApplication

`SpringApplication` 클래스는 `main()`메서드를 통해 실행되는 스프링 어플리케이션을 편리하게 만들수 있는 방법들을 제공한다. 대부분의 경우에 아래와 같이 해당 클래스의 스태틱 `run()`메소드에게 실행을 위임하게 된다.

```java
public static void main(String[] args) {
    SpringApplication.run(Exmaple.class, args);
}
```

실행 후에는 콘솔창이나 IDE를 통해서 `INFO`레벨의 로그 메시지와 기동과 관련된 상세정보들을 볼 수 있다. 이외의 로그레벨 설정에 대해서는 [26.4](https://docs.spring.io/spring-boot/docs/2.0.0.RC2/reference/htmlsingle/#boot-features-custom-log-levels)를 참고. 	각 logger별로 각각의 레벨을 `application.properties`파일에 명시하여 설정할 수 있다.

```properties
logging.level.root=WARN
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR
```

예를들어, root Logger의 레벨을 `WARN`으로 했을 경우, 현재는 아래와 같이 아무런 메시지없이 실행된다.

```
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.1.3.RELEASE)
```

#### 23.1. Startup Failure

만약 어프리케이션 기동이 실패하게 되면, 등록된 `FailureAnalyzers`가 관련된 에러메시지와 함께 **구체적인 해결방안**도 제공한다. 예를 들어, 8080 포트가 이미 사용중인 상태에서 어플리케이션을 기동하면 아래와같은 메시지를 보게 될 것이다.

```powershell
***************************
APPLICATION FAILED TO START
***************************

Description:

Embedded servlet container failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that is listening on port 8080 or configure this application to listen on another port.
```

* Spring Boot는 다양한 `FailureAnalyzer`구현체를 제공하며, 개발자가 취사선택 사용할 수 있다.
* `FailureAnalyzer`를 통한 에러분석이 불가능한 경우, [`debug`프로퍼티](https://docs.spring.io/spring-boot/docs/2.0.0.RC2/reference/htmlsingle/#boot-features-external-config) 혹은 [`DEBUG`로깅](https://docs.spring.io/spring-boot/docs/2.0.0.RC2/reference/htmlsingle/#boot-features-custom-log-levels)을 사용하면 된다.
  * jar 파일 실행시에 `--debug` 를 입력하면 `debug`프로퍼티와 동일한 효과를 가진다.

예를들어 아래와 같이 어플리케이션 실행시에 생성되는 Bean 클래스에 무조건 예외발생을 하게 하면..

```java
@PostConstruct
public void init(){
    throw new RuntimeException("Intended Exception");
}
```

아래와 같이 `debug`모드에서 실행하여 "condition report"를 보라는, 문구가 상세 에러메시지 전에 출력된다.

```
[  restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
[  restartedMain] o.s.boot.SpringApplication               : Application run failed
```

#### 23.2. Customizing the Banner

스프링 부트를 실행하면 실행 초기에, 아래와 같은 배너가 출력되는데 이를 개발자나 프로젝트 특성에 맞게 수정할 수 있다.

```powershell
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.1.3.RELEASE)
```

* 별도의 `banner.txt` 파일을 classpath에 두거나, `spring.banner.location`으로 위치를 설정해도 된다.
  * `spring.banner.charset`은 UTF-8 이외의 인코딩을 지원할 때 사용한다
  * `spring.banner.image.location`으로 프로퍼티에 명시하면, 이미지(`gif`,`jpg`,`png`)도 사용가능하다.


인터넷에 다양한 ASCII 코드 생성기를 사용해서 Text나 Image를 변환하여 `banner.txt`에 넣어주면 된다. 아래는 나의 닉네임을 넣어준 경우

```

     ██╗ ██████╗ ███████╗██╗  ██╗██╗   ██╗ █████╗    ███████╗███████╗ ██████╗
     ██║██╔═══██╗██╔════╝██║  ██║██║   ██║██╔══██╗   ██╔════╝██╔════╝██╔═══██╗
     ██║██║   ██║███████╗███████║██║   ██║███████║   ███████╗█████╗  ██║   ██║
██   ██║██║   ██║╚════██║██╔══██║██║   ██║██╔══██║   ╚════██║██╔══╝  ██║   ██║
╚█████╔╝╚██████╔╝███████║██║  ██║╚██████╔╝██║  ██║██╗███████║███████╗╚██████╔╝
 ╚════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝╚══════╝╚══════╝ ╚═════╝

[  restartedMain] me.joshua.Exmaple                        : Starting Exmaple on Lenovo with PID 19756 (/home/joshua/git/StudyBootWithRef/target/classes started by joshua in /home/joshua/git/StudyBootWithRef)
```


  * `banner.txt`파일에는 아래의 placeholder들을 사용해 변수처럼 값을 줄 수 있다.

| 변수(placeholder)                                            | 설명                                                         |
| ------------------------------------------------------------ | ------------------------------------------------------------ |
| `${application.version}`                                     | `MANIFEST.MF`에 선언된 어플리케이션의 버젼 정보              |
| `${application.formatted-version}`                           | `MANIFEST.MF` 에 선언된 어플리케이션의 버젼 (formmated)      |
| `${spring-boot.version}`                                     | 어플리케이션이 사용하는 스프링 부트 버젼 정보                |
| `${spring-boot.formatted-version}`                           | 어플리케이션이 사용하는 스프링 부트 버젼 (formmated)         |
| `${Ansi.NAME}` (or `${AnsiColor.NAME}`, `${AnsiBackground.NAME}`, `${AnsiStyle.NAME}`) | ANSI 이스케이프 코드 사용 관련, [`AnsiPropertySource`](https://github.com/spring-projects/spring-boot/tree/v2.0.0.RC2/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiPropertySource.java)링크를 참고 |
| `${application.title}`                                       | `MANIFEST.MF`에 선언된 어플리케이션의 타이틀                 |

* `MANIFEST.MF`에 위의 값들을 설정해주기 위해서는, maven jar 플러그인을 추가하고, 버젼정보나 타이틀 정보를 넣어 준뒤, `mvn clean package`로 빌드 후 `java -jar`로 실행하면 된다.

###### pom.xml

```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-jar-plugin</artifactId>
    <configuration>
        <archive>
            <manifestEntries>
                <implemetation-Version>1.0.0</implemetation-Version>
            </manifestEntries>
        </archive>
    </configuration>
</plugin>
```

###### build & run

```
joshua@Lenovo:~/git/StudyBootWithRef (master)$ mvn clean package

...

joshua@Lenovo:~/git/StudyBootWithRef/target (master)$ java -jar spring.boot.study-1.0-SNAPSHOT.jar 

 (v1.0-SNAPSHOT)
     ██╗ ██████╗ ███████╗██╗  ██╗██╗   ██╗ █████╗    ███████╗███████╗ ██████╗
     ██║██╔═══██╗██╔════╝██║  ██║██║   ██║██╔══██╗   ██╔════╝██╔════╝██╔═══██╗
     ██║██║   ██║███████╗███████║██║   ██║███████║   ███████╗█████╗  ██║   ██║
██   ██║██║   ██║╚════██║██╔══██║██║   ██║██╔══██║   ╚════██║██╔══╝  ██║   ██║
╚█████╔╝╚██████╔╝███████║██║  ██║╚██████╔╝██║  ██║██╗███████║███████╗╚██████╔╝
 ╚════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝╚══════╝╚══════╝ ╚═════╝
with Spring Boot 2.1.3.RELEASE
```

* 부트의 배너는 코드로도 설정할 수 있는데, `org.springframework.boot.Banner` 인터페이스의 `printBanner()`메서드를 구현해서 설정가능 하다.

###### `MyBanner.java`라는 구현체를 사용하는 경우

```java
public static void main(String[] args) {
    SpringApplication springApplication = new SpringApplication(Exmaple.class);

    springApplication.setBanner(new MyBanner());
    springApplication.run(args);
}
```

* `spring.main.banner-mode`를 프로퍼티에 설정하여서, 배너가 콘솔에 출력될지, 로거에 전달될지, 혹은 사용하지 않을지를 결정할 수 있다.
  * YAML map에서는 `off`가 `false`로 세팅되므로, `"off"`값으로 비활성화 가능하다.
* 출력된 배너는 `springBootBanner`라는 이름의 싱글톤 Bean으로 생성된다.

#### 23.3. Customizing SpringApplication

앞서서 `Banner` 구현체를 통한 배너 출력을 하기 위해서 `SpringApplication`을 인스턴스로 생성한뒤 설정한 것과 같이, 스프링 어플리케이션의 기본 설정을 **취향것** 변경할 수 있다.

* `SpringApplication`의 생성자에 전달되는 파라미터는, 스프링 Bean 설정 소스가 전달된다.
  * 대체로 `@Configuration` 이 선언된 클래스이지만, XML 등의 설정도 전달 가능하다. (`ResourceLoader`)
* 스프링 어플리케이션의 커스터마이징은 `application.properties` [파일](https://docs.spring.io/spring-boot/docs/2.0.0.RC2/reference/htmlsingle/#boot-features-external-config)로도 가능하다.

#### 23.4. Fluent Builder API

부모 자식관계를 가진 한 개이상의 `ApplicationContext`관계를 설정할 필요가 있거나, "fluent" 빌더 API를 사용해야 한다면, `SpringApplicationBuilder`를 사용하면 된다.

* 해당 빌더는, 선언된 메서드를 연결하여 호출하면서 아래와 같이 계층구조 설정을 할 수 있다.

```java
new SpringApplicationBuilder()
		.sources(Parent.class) //부모 설정 파일
		.child(Application.class) // 자식 설정 파일
		.bannerMode(Banner.Mode.OFF) // 배너 관련 설정
		.run(args); //실행 구문
```

* `ApplicationContext` 의 계층 구조 설정에는 몇 가지의 [**제약 사항**](https://docs.spring.io/spring-boot/docs/2.0.0.RC2/api/org/springframework/boot/builder/SpringApplicationBuilder.html)이 존재한다

#### 23.5. Application Events and Listeners

[`ContextRefreshedEvent`](https://docs.spring.io/spring/docs/5.0.4.RELEASE/javadoc-api/org/springframework/context/event/ContextRefreshedEvent.html)와 같은 일반적인 스프링 프레임워크의 이벤트에 더해서, `SpringApplication`은 어플리케이션 이벤트를 제공한다.

> 몇몇의 이벤트는 `ApplicationContext` 생성 이전에 발생하기 때문에, 해당 이벤트를 위한 리스너는 `@Bean`을 사용하는 방식으로 등록할 수 없기 때문에, `SpringApplication`의 `addListeners(...)`를 사용하거나 상응하는 빌더 메서드를 사용하면 된다.
>
> 만약 코드에 의한 설정대신에, 자동적으로 추가되길 원한다면, `META-INF/spring.factories`파일을 추가하고, `org.springframework.context.ApplicationListener=com.example.project.MyListener` 의 예제와 같이 해당 리스너의 클래스패스 위치를 참조하면 된다.

###### 어플리케이션 기동시 어플리케이션 이벤트가 전송되는 순서

1. 실행 후 어떠한 처리도 일어나기 전(리스너 등록 및 초기화 제외)에, `ApplicationStartingEvent` 발생
2. context에서 `Environment` 사용시 , context 생성전에 `ApplicationEnvirnmnetPreparedEvent` 발생
3. Bean 설정정보가 로딩 된 직후, context가 refresh가 되기 전에 `ApplicationPreparedEvent` 발생
4. context refresh 된 직후, command-line runner나 application이 호출되기 직전에 `ApplicationStartedEvent` 발생
5. command-line runner나 어플리케이션이 호출된 후에 `ApplicationReadyEvent` 발생,  이 단계에서는 어플리케이션이 서비스 요청에 대한 준비가 됬음을 의미힌다.
6. 기동 중에 실패가 발생할 경우엔 `ApplicationFailedEvent`가 발생

###### `ApplicationStartedEvent`를 리스너를 구현하여 추가한 경우

```java
public static void main(String[] args) {
    SpringApplication springApplication = new SpringApplication(Exmaple.class);
    springApplication.addListeners(new MyListner()); //MyListener를 추가
    springApplication.run(args);
}
```

