---
layout: post
title: "이것이 자바다 self study - chapter 4"
date: 2018-11-23
categories:
---
내 코딩 라이프의 80프로를 차지하는 조건문과 반복문, 일단 현업에서 데이터를 추출해서 가공할때 필수로 사용하는 기술이다. 특히 내가 운영 및 개발하던 시스템은 객체나 엔티티를 사용하지 않고 모든 layer에서 `HashMap`을 상속하는 `Box`라는 개념을 사용는데, 시스템 DB에서 조회한 데이터이든, 아니면 연관 시스템에서 연동받은 데이터이든 묻지도 따지지도 않고 Key`<String>`-Value`<Object>`로 때려 넣고 조회한다.

작년에 4개월간 프로젝트를 하면서 프리랜서로 3개국을 돌아다니면서 SI하셨던 분에 표현에 의하면 되게 괜찮은 방법이라고 하는데, 당시에는 뭐 1년이상 운영을 하면서 비즈니스 및 테이블 데이터를 숙지한 상황에서 개발하느라 어려움은 없었는 객체지향적인 관점에서 일한다는 생각이 들지는 않았었다. 그리고 작년 12월부터 다른 본부 프로젝트에 파견나와서 처음 ORM을 접하게 되었는데 확실히 `Box`안에 또 다른 형태의 `Box`를 포함하는 러시아 인형식의 개발에서, 엔티티와 참조의 개념으로 풀어나가는 ORM이 나한테는 더 맞는 것 같다.

아무튼 한번도 사용해본적없는 JPA와 Hibernate 때문에 1월에 급하게 책을 빌려서 공부중인데, _이것이 자바다_ 비축분 다 올리고나서 그것도 올려야겠다.

## Chapter 4 조건문과 반복문

### 4.1 코드 실행 흐름 제어

프로그래밍에서 조건문은 코드 실행 흐름을 제어해준다.

### 4.2 조건문(`if`문, `switch`문)

#### 4.2.1 `if`문

* `if`문은 괄호와 함께 **`if()`**의 형태로 사용되며, 해당 괄호에 안에는 `boolean` 리터럴, 타입변수, 혹은 타입을 산출하는 연산식이 올 수 있다.
* 해당 조건이 `true`이면 바로 뒤의 실행문이나, 중괄호 블록안의 실행문들을 수행한다.

#### 4.2.2 `if else`문

`else`문은 `if`문과 함께 사용되어 조건식이 `false`일때 수행된다.

#### 4.2.3 `if else if else`문

조건문이 여러개인 경우 `if`문과 `else if`문 그리고 마지막에 `else`문을 사용해서 코드 실행을 분기할 수 있다.

#### 4.2.4 중첩 `if`문

`if`문의 블록이나 다른 종류의 조건문 혹은 반복문 안에서 수행하는 `if`문을 말한다, 별다를 건 없다.

#### 4.2.5 `switch`문

* `switch`문은 두 가지만의 결과를 갖는`if`문과 달리 괄호 안의 변수의 값을 `case`문으로 확인해서 실행한다. 

* `switch()`문의 괄호 안에는 정수타입의 변수, 혹은 이를 산출하는 연산식과 `String`타입의 변수가 온다.
* `case`문의 경우 `case 'A':`와 같이 사용하는데, `:` 이후의 실행문과 뒤이은 `case`가 연달아 실행된다.
  * 즉, `case`문 이후에 `break;`문이 없을시, 조건 만족 후 모든 `break;`문 이전의 모든 내용이 실행된다.
* `default:`이하의 실행문은 만족하는 `case`문이 없을 시에 실행된다.

### 4.3 반복문(`for`문, `while`문, `do-while`문)

#### 4.3.1 `for`문

`for(초기화식 ; 조건식; 증감식){ 실행문 }`의 구조를 가지며, 실행 순서는 다음과 같다

1. 초기화식이 제일 먼저 실행된다.
2. 조건식이 `true`이면 실행문을 실행한다.
3. 실행문이 모두 실행되면 증감식을 수행하고 2로 돌아간다.

초기화식, 증감식은 `,`로 구분하여 둘 이상 있을수도 있다. 반복을 위한 카운트 변수를 일반적으로 초기화식에 선언하는데, 로컬변수로 사용되며 정수형을 사용한다. 왜냐하면 실수형은 수를 정확하게 퓨현할 수 없기 때문이다.

```java
int a =1;
for(System.out.println("초기화식") ; a<0 ;  System.out.println("증감식") ){
	System.out.println("블록");
}
```

위의 결과는 `초기화식`만 출력된다. 컴파일 시점에 `false`인 경우 사용할 수 없다.

#### 4.3.2 `while`문

`while(조건식){ 실행문 }` 의 구조로, 조건식이 `true`인 경우 실행문을 반복한다.

#### 4.3.3 `do while`문

`do { 실행문 } while(조건문)` 의 구조로 `while`문과 유사하나 실행문을 우선 실행한다는 것이 다르다.

1. 실행문을 실행한다.
2. 조건식을 평가해 `true`이면 실행문을 실행한다.
3. 2번 반복

#### 4.3.4 `break`문

`switch`문에서 사용하는 것과 같이, 반복문을 종료하여 루프를 빠져나올 때 사용한다. 일반적으로 `if`문과 함께 사용된다. 중첩된 경우엔 가장 가까운 반복문만 종료하고, 바깥쪽 반복문까지 종료 시키려면 반복문에 다음과 같이 `이름: for()`이름을 붙이고 `break 이름;`형태로 사용하여 해당 이름을 붙인 루프를 빠져나온다.

#### 4.3.5 continue문

`break`문은 수행 시점에 반복을 종료하지만, `continue`문은 조건식 평가 단계로 이동한다는 점이 다르다.  일반적으로`break`문 처럼 `if`문과 함께 사용한다.
