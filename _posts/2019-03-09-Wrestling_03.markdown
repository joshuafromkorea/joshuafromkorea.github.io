---
layout: post
title: "레퍼런스로 스터디하는 스프링 부트 3회차 정리"
date: 2019-03-24
categories:
---
## 레퍼런스로 스터디하는 스프링부트 3회차

스프링 부트에서 의존성을 쉽게 해주는 스프링 부트 스타터에 대한 내용이다. 여기서부터 기존 스프링 프레임워크만 썻던 나는 여러가지 편리함을 느낄 수 있었다. 물론 IDE가 제공하는 자동완성이나 Maven 원격저장소를 검색하는 기능을 통해서 쉽게 여러 의존성을 추가할 수 있지만. 스프링이 정의해놓은, 그리고 3rd 파티 라이브러리나, 커뮤니티 라이브러리들은 스타터를 추가하는 방식으로 버전등을 신경쓰지 않고 쉽게 할 수 있다는 점은 큰 매력이다.

3강 강의링크: [**스프링 부트 스타터**](https://youtu.be/w9wqpnLHnkY)

3강 레퍼런스: **[13.5 ~ 15.1](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#using-boot-starter)**

---

#### 13.5 Starters

- **스프링 부트 스타터**: 어플리케이션에서 사용할 의존성의 간편한 서술 집합
  - 스프링 및 관련 기술들을 사용하기 위한 sample code를 사용하지 않고, 한번의 서술로 적용
- 스프링 Data를 사용하는 **예**: `spring-boot-starter-data-jpa`만 추가해주면 된다.
- 스프링에서 공인하는 스타터들은 `spring-boot-starter-*` 규칙을 따른다.
  - 3rd party 라이브러리나, [직접 만드는 스타터](#49.5 Creating Your Own Starter)의 경우 위 명명규칙을 피해야 한다.
- `org.springframework.boot` 그룹이하의 어플리케이션 스타터 목록

| Name                        | Description                                                  | Pom                                                          |
| --------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |
| **`spring-boot-starter`**   | Core starter, including auto-configuration support, logging and YAML | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter/pom.xml) |
| `*-activemq`                | Starter for JMS messaging using Apache ActiveMQ              | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-activemq/pom.xml) |
| `*-amqp`                    | Starter for using Spring AMQP and Rabbit MQ                  | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-amqp/pom.xml) |
| `*-aop`                     | Starter for aspect-oriented programming with Spring AOP and AspectJ | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-aop/pom.xml) |
| `*-artemis`                 | Starter for JMS messaging using Apache Artemis               | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-artemis/pom.xml) |
| `*-batch`                   | Starter for using Spring Batch                               | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-batch/pom.xml) |
| `*-cache`                   | Starter for using Spring Framework’s caching support         | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-cache/pom.xml) |
| `*-cloud-connectors`        | Starter  for using Spring Cloud Connectors which simplifies connecting to  services in cloud platforms like Cloud Foundry and Heroku | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-cloud-connectors/pom.xml) |
| `*-data-cassandra`          | Starter for using Cassandra distributed database and Spring Data Cassandra | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-cassandra/pom.xml) |
| `*-data-cassandra-reactive` | Starter for using Cassandra distributed database and Spring Data Cassandra Reactive | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-cassandra-reactive/pom.xml) |
| `*-data-couchbase`          | Starter for using Couchbase document-oriented database and Spring Data Couchbase | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-couchbase/pom.xml) |
| `*-data-couchbase-reactive` | Starter for using Couchbase document-oriented database and Spring Data Couchbase Reactive | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-couchbase-reactive/pom.xml) |
| `*-data-elasticsearch`      | Starter for using Elasticsearch search and analytics engine and Spring Data Elasticsearch | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-elasticsearch/pom.xml) |
| `*-data-jdbc`               | Starter for using Spring Data JDBC                           | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-jdbc/pom.xml) |
| `*-data-jpa`                | Starter for using Spring Data JPA with Hibernate             | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-jpa/pom.xml) |
| `*-data-ldap`               | Starter for using Spring Data LDAP                           | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-ldap/pom.xml) |
| `*-data-mongodb`            | Starter for using MongoDB document-oriented database and Spring Data MongoDB | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-mongodb/pom.xml) |
| `*-data-mongodb-reactive`   | Starter for using MongoDB document-oriented database and Spring Data MongoDB Reactive | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-mongodb-reactive/pom.xml) |
| `*-data-neo4j`              | Starter for using Neo4j graph database and Spring Data Neo4j | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-neo4j/pom.xml) |
| `*-data-redis`              | Starter for using Redis key-value data store with Spring Data Redis and the Lettuce client | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-redis/pom.xml) |
| `*-data-redis-reactive`     | Starter for using Redis key-value data store with Spring Data Redis reactive and the Lettuce client | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-redis-reactive/pom.xml) |
| `*-data-rest`               | Starter for exposing Spring Data repositories over REST using Spring Data REST | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-rest/pom.xml) |
| `*-data-solr`               | Starter for using the Apache Solr search platform with Spring Data Solr | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-solr/pom.xml) |
| `*-freemarker`              | Starter for building MVC web applications using FreeMarker views | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-freemarker/pom.xml) |
| `*-groovy-templates`        | Starter for building MVC web applications using Groovy Templates views | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-groovy-templates/pom.xml) |
| `*-hateoas`                 | Starter for building hypermedia-based RESTful web application with Spring MVC and Spring HATEOAS | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-hateoas/pom.xml) |
| `*-integration`             | Starter for using Spring Integration                         | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-integration/pom.xml) |
| `*-jdbc`                    | Starter for using JDBC with the HikariCP connection pool     | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jdbc/pom.xml) |
| `*-jersey`                  | Starter for building RESTful web applications using JAX-RS and Jersey. An alternative to [`spring-boot-starter-web`](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#spring-boot-starter-web) | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jersey/pom.xml) |
| `*-jooq`                    | Starter for using jOOQ to access SQL databases. An alternative to [`spring-boot-starter-data-jpa`](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#spring-boot-starter-data-jpa) or [`spring-boot-starter-jdbc`](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#spring-boot-starter-jdbc) | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jooq/pom.xml) |
| `*-json`                    | Starter for reading and writing json                         | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-json/pom.xml) |
| `*-jta-atomikos`            | Starter for JTA transactions using Atomikos                  | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jta-atomikos/pom.xml) |
| `*-jta-bitronix`            | Starter for JTA transactions using Bitronix                  | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jta-bitronix/pom.xml) |
| `*-mail`                    | Starter for using Java Mail and Spring Framework’s email sending support | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-mail/pom.xml) |
| `*-mustache`                | Starter for building web applications using Mustache views   | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-mustache/pom.xml) |
| `*-oauth2-client`           | Starter for using Spring Security’s OAuth2/OpenID Connect client features | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-oauth2-client/pom.xml) |
| `*-oauth2-resource-server`  | Starter for using Spring Security’s OAuth2 resource server features | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-oauth2-resource-server/pom.xml) |
| `*-quartz`                  | Starter for using the Quartz scheduler                       | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-quartz/pom.xml) |
| `*-security`                | Starter for using Spring Security                            | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-security/pom.xml) |
| `*-test`                    | Starter for testing Spring Boot applications with libraries including JUnit, Hamcrest and Mockito | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-test/pom.xml) |
| `*-thymeleaf`               | Starter for building MVC web applications using Thymeleaf views | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-thymeleaf/pom.xml) |
| `*-validation`              | Starter for using Java Bean Validation with Hibernate Validator | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-validation/pom.xml) |
| `*-web`                     | Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-web/pom.xml) |
| `*-web-services`            | Starter for using Spring Web Services                        | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-web-services/pom.xml) |
| `*-webflux`                 | Starter for building WebFlux applications using Spring Framework’s Reactive Web support | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-webflux/pom.xml) |
| `*-websocket`               | Starter for building WebSocket applications using Spring Framework’s WebSocket support | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-websocket/pom.xml) |

- 상용환경을 위해 스프링 부트의 모니터링 정보를 제공하는 기능의 스타터가 있다.

| Name         | Description                                                  | Pom                                                          |
| ------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |
| `*-actuator` | Starter  for using Spring Boot’s Actuator which provides production ready  features to help you monitor and manage your application | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-actuator/pom.xml) |

- 기본 스타터를 대체할 수 있는, 테크니컬 스타터들도 아래와 같이 제공한다.

| Name              | Description                                                  | Pom                                                          |
| ----------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |
| `*-jetty`         | Starter for using Jetty as the embedded servlet container. An alternative to [`spring-boot-starter-tomcat`](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#spring-boot-starter-tomcat) | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jetty/pom.xml) |
| `*-log4j2`        | Starter for using Log4j2 for logging. An alternative to [`spring-boot-starter-logging`](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#spring-boot-starter-logging) | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-log4j2/pom.xml) |
| `*-logging`       | Starter for logging using Logback. Default logging starter   | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-logging/pom.xml) |
| `*-reactor-netty` | Starter for using Reactor Netty as the embedded reactive HTTP server. | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-reactor-netty/pom.xml) |
| `*-tomcat`        | Starter for using Tomcat as the embedded servlet container. Default servlet container starter used by [`spring-boot-starter-web`](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#spring-boot-starter-web) | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-tomcat/pom.xml) |
| `*-undertow`      | Starter for using Undertow as the embedded servlet container. An alternative to [`spring-boot-starter-tomcat`](https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#spring-boot-starter-tomcat) | [Pom](https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-undertow/pom.xml) |

- `spring-boot-starters` 모듈의 깃헙 [README file](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/README.adoc)을 참고하면, 추가적인 커뮤니티 스타터들을 볼 수 있다.

### 14. Structuring Your Code

스프링 부트는 특정한 코드 구조를 요구하지는 않지만, 모범적인 예시들을 아래와 같이 제공한다.

#### 14.1 Using the "default" Package

- 특정 어노테이션들과의 상호작용에서 문제를 일으킬 수 있기 때문에 쓰지 말아야 한다.
  - `@ComponentScan`, `@EntityScan`,  `@SpringBootApplication` 등
- 따라서, 일반적인 Java의 명명 규칙을 따라 만드는 것 권장한다.

#### 14.2 Locating the Main Application Class

- Main Application Class란, `main()` 메소드를 포함하는 클래스로, root 패키지에 배치하길 권장한다.
  - Main Application Class는 종종 `@SpringBootApplication`어노테이션을 포함하며, 묵시적으로 특정 항목들의 "탐색 패키지"로 정의된다.
  - 예를들어, JPA 어플리케이션에서는 해당 어노테이션이 붙은 클래스는, `@Entity`가 붙은 항목들을 찾는다.
  - 따라서, root 패키지에 배치하게 되면, 컴포넌트 스캔 범위를 프로젝트로 한정시킬 수 있다.
- 전형적인 스프링부트의 패키지 구조는 다음과 같다.

```
com
 +- example
     +- myapplication
         +- Application.java
         |
         +- customer
         |   +- Customer.java
         |   +- CustomerController.java
         |   +- CustomerService.java
         |   +- CustomerRepository.java
         |
         +- order
             +- Order.java
             +- OrderController.java
             +- OrderService.java
             +- OrderRepository.java
```

- `Application.java`는 이하처럼,  `main()` 메소드와 `@SpringBootApplication`을 가지고 있을 것이다.

```java
package com.example.myapplication;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}
}
```

### 15. Configuration Classes

- Spring Boot는 [자바기반의 설정](https://joshuafromkorea.github.io/2019/03/17/toby-vol2-01_03.html)을 권장한다. (토비의 스프링 vol.2 1장에 자세히 나옴)
  - XML기반의 설정보다, 하나의 `@Configuration`을 사용하는 방법이다.
  - `main()`메소드를 사용하는 클래스가 `@Configuration`를 붙일 우선적인 후보가 된다.

> 인터넷에서 찾을 수 있는 스프링의 설정 예제들은 대부분 XML을 사용한다. 가능하면 해당 XML과 동일한 역할을 하는 자바 기반의 설정을 사용해라. `Enable*` 어노테이션을 기반으로 검색하는 것이 좋은 방법이 될 것이다.

#### 15.1 Importing Additional Configuration Classes

- 꼭 하나의 클래스로 `@Configuration` 정리하는 것이 강제되는 것이 아니다.
  - `@Import` 어노테이션 사용을 통해 추가적인 설정 클래스를 지정 할 수 있다. 
  - `@ComponentScan`을 사용해서 자동적으로 스프링 컴포넌트들을 찾는 방법도 있다.

------

#### 49.5 Creating Your Own Starter

- 완전한 스프링 부트 스타터는 아래의 구성을 포함할 수 있다.
  - 자동 설정 코드가 담긴 관련된 `autoconfigure` 모듈
  - 라이브러리를 위해 필요한 **모든 것**을 담은 `starter` 모듈 (스타터에 자동설정 코드 합치기 가능)

##### 49.5.1 Naming

- **`spring-boot`로 시작하는 이름은사용하지 말 것!**
- 설정 키<sup>configuration key</sup>를 사용할 시, 스프링 부트가 사용하는 namespace는 제외 할 것
  - `server`, `management`, `spring` 등등
- 메타 데이터 생성이 될 수 있도록, 해서 IDE등에서 설정에 대한 자동완성 기능이 지원되게 해야 한다.

##### 49.5.2 `autoconfigure` Module

- 라이브러리 시작을 위해 필요한 모든 것을 담고 있는 모듈
- configuration key와 관련된 정의를 담고 있을 수 있다.
- 커스터마이징 설정을 위한 call back 인터페이스를  담고있을 수 있다.
- 자동설정이 포함된 모듈에는 아래의 의존성을 추가하면, 스프링 부트가 메타데이터를 수집하는 시간을 감소시킬 수 있다.

```xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-autoconfigure-processor</artifactId>
	<optional>true</optional>
</dependency>
```

##### 49.5.3 Starter Module

- 스타터는 해당 라이브러리 작동에 필요한 의존성을 제공하는 목적만을 가진 empty jar이다.
- 스타터 모듈이 사용될 프로젝트에 대한 어떠한 가정도 하지 말아야 한다
- 만약 해당 라이브러리가 다른 스타터를 요구한다면 반드시 명시하라
  - 사실, optional 의존성들을 추가하지 않는 것이 좋다.
- 직,간접적으로 `spring-boot-starter`를 reference를 참조하고 있어야 한다.

