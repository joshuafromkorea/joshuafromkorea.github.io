---
layout: post
title: "이것이 자바다 self study - chapter 12"
date: 2019-06-02
categories:
---

무려 5개월만에 이것이 자바다를 다시 폈다. 1권을 마무리하고 금방 2권을 끝낼거라는 다짐은 지켜지지 않았다. 다시 펴들고 나머지 공부를 시작하게된 계기는 어느 시니어 개발자와의 대화 때문이었다. 자바8을 잘못쓴다고 말하면서 개발에 대한 열정이 있다고 하는 나를 채근하였기 때문이다. 

그러다보니 자바 8 책을 사놓고 자바8을 공부하기전에 자바7까지 한번 정리하겠다는 마음으로 지난연말에 시작했던 이것이 자바다가 생각났고, 곧바로 주말과 연휴를 빌어서 순식간에 3챕터를 독파했다. 이것이 자바다 2권에는 자바 8에서 나온 개념인 람다와 스트림 병렬처리들이 같이 있다. 따라서 해당챕터는 스킵하려고 한다. 그리고 ui를 다루는 JAVA FX와 네트워크 부분은 기회가 되면 다음에 공부하기로 하겠다.

---

## Chapter 12 멀티스레드

### 12.1 멀티 스레드 개념

#### 12.1.1 프로세스와 스레드

* OS에게 하나의 어플리케이션은 곧 **프로세스(process)**이다
  * OS는 어플리케이션에게 메모리를 할당해 주고, 때로는 다수의 프로세스로 생성될 수 있다.
* 하지만 하나의 프로세스에서도 여러 작업(Multi-tasking)을 할 수 있는데, **멀티 스레드**라는 방식을 사용한다.
  * 한 프로세스내의, 한 스레드는 다른 스레드에 영향을 주지만 다른 프로세스에는 영향을 줄 수 없다.

#### 12.1.2 메인 스레드

* 모든 Java 어플리케이션은 `main()`메소드를 실행하면서 메인 스레드가 시작됨을 통해 실행된다.
  * 이 메인 스레드는 `main()`안에 있는 코드를 순차적으로 실행하여 return을 만나거나, 마지막코드를 만나면 종료된다.
* 메인스레드는, 작업 스레드를 만들여 병렬로 코드를 실행하게 한다. 
  * 메인스레드가 종료 되었더라도, **작업 스레드가 활성화 되어있으면 프로세스는 살아있는다.**

### 12.2 작업 스레드 생성과 실행

* 자바에서는 작업스레드를 객체로 생성하기 때문에, `java.lang.Thread` 나 이를 상속한 클래스가 필요하다.

#### 12.2.1

* `java.lang.Thread`의 생성자는 `Runnable` 인터페이스 타입을 매개변수로 받는다.

```java
public Thread(Runnable target) {
    init(null, target, "Thread-" + nextThreadNum(), 0);
}
```

* `Runnable`은 작업 스레드가 실행할 수 있는 객체로, 사용자가 구현해야 한다.

  * 내부에 있는 `run()` 메소드를 구현하는 코드를 작성하여서 하게 된다.

  ```java
  class Task implements Runnable {
      public void run(){
          //thread code here
      }
  }
  ```

  * `Runnable`은 **작업 내용**객체로, 매개변수로 넘겨주는 `Thread` 가 스레드 객체이다.

    * 실제로는 대부분의 경우 아래와 같이 **익명구현객체를** 통해서 한다

    ```java
    Thread thread = new Thread(new Runnuable(){
        public void run(){
            //thread code here
        }
    });
    ```

  * 실제 스레드의 실행은 `Thread.start()`를 통해서 실행된다.

#### 12.2.2 `Thread` 하위 클래스로부터 생성

* `Thread`를 상속받은 하위 클래스 내부에서 `run()`을 재정의하면, `Runnable`이 필요없다.

```java
public class WorkerThread extends Thread{
    @Override
    public void run(){
       //thread code here
    }
}
Thread thread = new WorkerThread();
thread.run();
```

#### 12.2.3 스레드의 이름

* `Thread`클래스는 스레드의 이름을 지정할 수 있는 `setName()` 메소드를 가지고 있다.

```java
public final synchronized void setName(String name) {
    checkAccess();
    this.name = name.toCharArray();
    if (threadStatus != 0) {
        setNativeName(name);
    }
}
```

* `getName()` 메소드를 통해서 이름을 가지고 올 수 있다.
  * `Thread` 객체를 처음 생성할 때 사실 `"Thread-"` 로 시작하는 이름이 자동으로 부여된다.

### 12.3 스레드 우선순위

* 멀티스레드의 특징은 **동시성(Concurrency)**과 **병렬성(Parallelism)**이다.
  * 동시성: 하나의 코어에서 여러개의 스레드가 **번갈아**실행 되는 것
  * 병렬성: 다수의 코어에서 **개별 스레드가** 동시에 실행하는 것

* 스레드의 갯수 > 코어의 갯수 일때,

  * 어떤 순서에 의해 동시성으로 실행할지를 결정하는 것을 **스레드 스케쥴링**이라고 한다

* 자바가 제공하는 **스레드 스케쥴링** 방식 중 **우선순위**방식은 개발자가 코드로 제어할 수 있다.

  * 1 ~ 10까지의 우선순위로, 10이 가장 높은 우선순위를 가진다
  * 일반적으로 스레드들은 우선순위를 **5**로 할당 받으며  `setPriority()` 로 우선순위를 할당 할 수 있다.
  * 우선순위를 위한 `Thread`내부의 상수 값을 사용해서 할당하는 것이 좋다.

  ```java
  public final static int MIN_PRIORITY = 1;
  public final static int NORM_PRIORITY = 5;
  public final static int MAX_PRIORITY = 10;
  
  ...중략...
      
  public final void setPriority(int newPriority) {
      ThreadGroup g;
      checkAccess();
      if (newPriority > MAX_PRIORITY || newPriority < MIN_PRIORITY) {
          throw new IllegalArgumentException();
      }
      if((g = getThreadGroup()) != null) {
          if (newPriority > g.getMaxPriority()) {
              newPriority = g.getMaxPriority();
          }
          setPriority0(priority = newPriority);
      }
  }
  ```

* 단 이러한 우선순위는 (코어 갯수 > 스레드 갯수)일 경우에는 적용이 되지 않는다.

### 12.4 동기화 메소드의 동기화 블록

#### 12.4.1 공유 객체를 사용할 떄의 주의할 점

- 멀티 스레드에서 서로 다른 스레드가 **객체를 공유**해야 하는 상황이 있다.
- 이런 상황에서 해당 객체들에서 일어나는 상태변화로 인해 원치 않는 결과를 얻을 수 있다.

#### 12.4.2 동기화 메소드 및 동기화 블록

- 상기한 문제에 대한 대응법으로 "단 하나의 스레드만 실행할 수 있는 **임계영역**"을 설정해야 한다. 하며 이를 위해 자바는 두가지 방법을 제공한다

  - **동기화 메소드**: `synchronized` 예약어를 사용하여 선언한 메소드로, 단하나의 스레드만 실행가능하다

  ```java
  public synchronized void method(){
    //단 하나의 스레드만 실행하는 임계영역
  }
  ```

  - **동기화 블록**: 메소드 일부에만 임계영역을 만들고 싶다면 동기화 블록을 선언하면 된다. 선언시에 넘겨주는 객체에 잠금이 일어난다.

  ```java
  public void method(){
    //여러 스레드가 실행 하능한 영역
    
    synchronized(공유객체){ //자신을 넘겨주려면 this를 넣으면 된다.
        //단하나의 스레드만 실행가능한 임계영역
    }
  }
  ```

- 만약에 객체 내부에 동기화블록 과 동기화 메소드가 다수 존재할 경우, 한 스레드가 하나만 사용해도 다른 스레드는 나머지 부분에 접근할 수 없다.

<div class="mermaid">
graph TB
	t2(thread-2)
	t1(thread-1)
	subgraph object
		sm[synchronized method]
		sb[synchronized block]
		m[method]
	end
	t1-->|사용중|sm
	t1-->|사용가능|sb
	t1-->|사용가능|m
	t2-.->|사용불가|sm
	t2-.->|사용불가|sb
	t2-->|사용가능|m
</div>

### 12.5 스레드 상태

- 스레드 객체의 `start()`메소드를 호출한 뒤에도,  CPU를 점유하지 않으면 실행되지 않는다.
  - 또한 스레드가 다수일 때, 스레드는 실행 대기상태와 실행상태를 번갈아가면서 작업을 실행하게 된다.

<div class="mermaid">
graph LR
	NEW(스레드객체 생성<br/><b>NEW</b>)
	RNB(실행 대기<br/><b>RUNNABLE</b>)
	RUN[실행]
	END(종료<br/>TERMINATED)
	NEW-->|"start()"|RNB
	RNB-->|반복|RUN
	RUN-->|반복|RNB
	RUN-->END
</div>


- 위의 그림 이외에도 **일시 정지** 상태 까지 포함하여 총 아래의 6가지 상태가 있으며, `getState()`메소드를 통해 스레드의 상태를 `Enum` 타입으로 얻을 수 있다.

| 상태      | 열거 상수    | 설명                                             |
| --------- | ------------ | ------------------------------------------------ |
| 객체 생성 | `NEW`        | 객체 생성 후 `start()` 메소드 호출 전            |
| 실행 대기 | `RUNNABLE`   | 실행 상태로 언제든지 돌아갈 수 있는 상태         |
| 일시정지  | `WAITING`    | 다른 스레드의 통보를 기다리는 상태               |
|           | `TIMED`      | 주어진 시간동안 기다리는 상태                    |
|           | `BLOCKED`    | 사용하고자 하는 객체의 lock 해제를 기다리는 상태 |
| 종료      | `TERMINATED` | 실행을 마친 상태                                 |

### 12.6 스레드 상태 제어

- 12.5 절에서 언급한 스레드의 상태들은 코드를 통해 제어할 수 있고, 멀티스레드 프로그래밍에서 스레드의 상태제어는 필수이다.
- 스레드의 상태 제어는 아래와 같은 메소드들을 통해서 제어할 수 있다.

<div class="mermaid">
graph LR
	P(일시정지)
	W(실행대기)
	R(실행)
	M1["interrupt()<br/>notify()<br/>notifyAll()<br/><del>resume()</del>"]
	M2["sleep()<br/>join()<br/>wait()<br/><del>suspend()</del>"]
	E(종료)
	P---M1
	M1-->W
	W-->R
	R-->|"yield()"|W
	R---M2
	M2-->P
	R-->|"<del>stop()</del>"|E
</div>

- 위에서 취소선이 그어진 것은 `Deprecated`된 메소드들로 사용하지 말아야 한다. 위의 메소드들을 하나씩 살펴보면 아래와 같다.

| 메소드                                                       | 설명                                                         |
| ------------------------------------------------------------ | ------------------------------------------------------------ |
| `interrupt()`                                                | 일시정지 상태에서 `InterruptedException`을 발생시켜서, `catch`블록을 통해 실행대기나, 종료상태로 갈 수 있게 한다. |
| `notify()`<br/>`notifyAll()`                                 | `wait()` 메소드를 통해 일시정지에 있는 스레드를 실행 대기로 만든다. |
| <del>`resume()`</del>                                        | <del>`suspend()`</del>에 의해 일시정지에 있는 스레드를 실행대기로 만든다. |
| `sleep(long millis)`<br/>`sleep(long millis, int nanos)`     | 주어진 시간동안 스레드를 일시정지로 만든다, 시간이 끝나면 실행 대기가 된다. |
| `join()`<br/>`join(long millis)` `join(long millis, int nanos)` | `join()` 메소드를 호출하면 일시정지가 된다. `join()`을 멤버로 가지는 스레드가 종료되거나, 매개값으로 전달한 시간이 종료되면 실행대기가 된다. |
| `wait()`<br/>`wait(long millis)`<br/>`wait(long millis, int nanos)` | 동기화 블록내에서 스레드를 일시정지로 만든다. 시간이 주어지지 않으면 `notify()`, `notifyAll()`로 실행대기로 만들 수 있다. |
| <del>`suspend()`</del>                                       | 스레드를 일시정지 상태로 만든다. <del>`resume()`</del>으로 복구 |
| `yield()`                                                    | 실행 우선순위가 동일한 다른 스레드에게 양보하고 실행대기상태가 된다. |
| `stop()`                                                     | 스레드를 즉시 종료 시킨다.                                   |

#### 12.6.1 주어진 시간동안 일시정지 (`sleep()`)

- `sleep()`은 `Thread`의 정적메소드로, 해당 메소드가 호출 된 스레드는 주어진 시간 만큼 정지한다

```java
try{
    Thread.sleep(1000);
}catch(InterruptedException e){
    //interrupt()메소드 호출시 실행
}
```

#### 12.6.2 다른 스레드에게 실행 양보(`yield()`)

- 한쪽의 스레드에서 일어나는 작업보다, 다른 상태의 스레드에서 일어날 작업이 먼저 실행되는 것이 필요할 때 `yield()`를 사용한다.

  - 예를 들어 B스레드에서 처리된 결과를 통해, A스레드의 반복문을 종료시키는 경우엔 B를 먼저 처리하는 것이 좋을 것이다.

  ```java
  public void run(){
      while(true){
          if(t2.isWorkDone){
              //스레드 2의 실행이 종료되면 실행될 코드
              break;
          }else{
              Thread.yield();
          }
      }
  }
  ```

#### 12.6.3 다른 스레드의 종료를 기다림(`join()`)

- 양보하는 것 이외에, 다른 스레드의 작업이 모두 종료될 때까지 기다려야 하는 경우가 있다. 이럴때는 `join()`을 사용하면 된다.

```java
SumThread sumThread = new SumThread();
sumThread.start();

try{
    sumThread.join();
}catch(InterruptedException e){
    
}
//sumThread 가 완전히 종료되어야지 실행된다.
```

#### 12.6.4 스레드 간 협업(`wait()`, `notify()`, `notifyAll()`)

- 스레드간의 작업을 번갈아가면서 실행할 필요가 있을때는 `wait()`과 `notify()`를 통한 상태변경을 통해 진행할 수 있다.
  - `wait()`메소드에 시간을 넘겨주면, `notify()`메소드 없이도 실행 대기 상태로 되돌릴 수 있다.
- 협업을 위한 3가지의 메소드는 모두 `Thread`가 아닌 `Object`에 선언되어 있으므로, 공유객체 내부에서 호출이 가능하다. 
  - 스레드에서 수행할 작업을 별도의 클래스에 구현하고, 이를 두 스레드에서 실행하는 아래의 예제를 참고

##### `WorkObject.java` - 공유 객체

```java
public class WorkObject{
    public synchronized void methodA(){
        System.out.println("ThreadA starts methodA()");
        notify();
        try{
            wait();
        }catch(InterruptedException e){
            
        }
    }
    public synchronized void methodB(){
        System.out.println("ThreadB starts methodB()");
        notify();
        try{
            wait();
        }catch(InterruptedException e){
            
        }
    }
}

```

###### `ThreadA.java` - 공유객체의 `methodA()`를 실행하는 스레드

```java
public class ThreadA extends Thread{
    private WorkObject workObject;
    
    //constructor
    
    @Override
    public void run(){
        for(int i=0; i<10; i++){
            workObject.methodA(); //methodA()를 10회 반복 호출
        }
    }
}

```

##### `ThreadB.java` - 공유객체의 `methodB()`를 실행하는 스레드

```java
public class ThreadB extends Thread{
    private WorkObject workObject;
    
    //constructor
    
    @Override
    public void run(){
        for(int i=0; i<10; i++){
            workObject.methodB(); //methodA()를 10회 반복 호출
        }
    }
}

```

##### `WaitNotifyExample.java`- 두 스레드를 생성하고 실행하는 메인스레드

```java
public class WaitNotifyExmaple{
    public static void main(String[] args){
        WorkObject sharedObject = new WorkObject();
        
        ThreadA tA = new ThreadA(sharedObject);
        ThreadA tB = new ThreadB(sharedObject);
        
        tA.start();
        tB.start();
    }
}

```

- `main()` 메소드를 실행하게 되면, 두 스레드가 `wait()`과 `notify()`를 통해 번갈아 실행하는 결과를 볼 수 있다.

#### 12.6.5 스레드의 안전한 종료(`stop` 플래그, `interrupt()`)

- 경우에 따라 `run()`으로 실행중인 상태에서 즉시 종료할 때가 필요할 수 있다. 이를위해 <del>`stop()`</del> 메소드가 제공되었으나, 즉시종료에 따른 자원 누수 문제로 `Deprecated`되었다.

##### `stop` 플레그를 이용하는 방법

```java
public class SomeThread extends Thread{
    private boolean stop; //stop 플래그 필드
    
    public void run(){
        while(!stop){
            //스레드가 반복 실행하는 코드
        }
        //스레드가 사용한 자원 정리
    }
}

```

##### `interrupt()`메소드를 이용하는 방법

- `interrupt()`메소드는 스레드 **일시정지**상태에서 `IntteruptedException`을 발생시키는 역할을 한다.
  - 이를 이용해서 `run()`메소드를 정상 종료 시키는 방법도 있다.

```java
public void run(){
    try{
        while(true){
            ...
            Thread.sleep(1);
        }
    }catch(InterruptedException e){
        
    }
    //스레드가 사용한 자원 정리
}

```

- **반드시 기억할 점은**, `interrupt()`메소드는 스레드가 **일시정지**상태에서만 작동한다는 것이다.
  - 위의 예제코드에서도 `Thread.sleep()`을 통해서 잠시나마 일시정지 상태를 만든다.

### 12.7 데몬 스레드

- 데몬스레드는 주 스레드의 작업을 돕는 보조 스레드로, 주 스레드 종료시 같이 종료 된다.
- 스레드를 데몬으로 만드는 방법은, 주스레드에서 데몬이 될 스레드에 `setDaemon(true)`를 호출하면 된다.

```java
thread.setDaemon(true);
thread.start();

```

- `isDaemon()`을 통해 현재 실행중인 스레드가 대몬인지 아닌지를 알 수 있다.

### 12.8 스레드 그룹

- 스레드 그룹은 스레드를 하나의 그룹으로 묶어서 관리할 수 있는 방법이다.
  - 명시적으로 스레드 그룹을 묶지 않으면 자신을 실행한 스레드와 같은 그룹이 된다.
  - 따라서 기본적으로 모든 스레드는 main 스레드 그룹에 속하게 된다.

#### 12.8.1 스레드 그룹 이름 얻기

- `Thread.getThreadGroup()`을 호출하면, `ThreadGroup` 객체를 얻을 수 있고, 여기서 `getName()`을 호출해 그룹의 이름을 얻을 수 있다.

#### 12.8.2 스레드 그룹 생성

- `ThreadGroup` 객체를 생성하면, 곧 스레드 그룹이 생성되는데 매개변수로 다른 `ThreadGroup`을 넘기면 부모 그룹이 지정된다.
  - 이름만으로 생성하면, 현재 스레드를 생성한 스레드의 그룹이 부모 그룹이 된다.

```java
ThreadGroup tg = new ThreadGroup(String name); // 이름만으로 그룹생성
ThreadGroup tg = new ThreadGorup(ThreadGroup parent, String name); //부모설정

```

- 생성된 스레드 그룹에 스레드를 포함시킬 때에는 `Thread` 객체를 생성할 때 `ThreadGroup` 객체를 매개값으로 전달하면 된다.

  - 총 4가지의 생성자를 지원한다.

  ```java
  new Thread(ThreadGroup group, Runnable target);
  new Thread(ThreadGroup group, Runnable target, String name);
  new Thread(ThreadGroup group, Runnable target, String name, long stackSize);
  new Thread(ThreadGroup group, Runnable target, String name);
  
  ```

#### 12.8.3 스레드 그룹의 일괄 `interrupt()`

- 동일 그룹에 소속된 스레드를 한번에 `interrupt()` 시킬 수도 있다.
  - `ThreadGroup.interrupt()` 메소드가 그룹내의 모든 스레드의 `interrupt()`를 호출해주기 때문이다.
  - 단 예외처리는 개별 스레드가 진행해야 한다.
- 이외에도 스레드그룹이 가진 다른 메소드들이 있으나 대부분은 `Deprecated`된 상태이다.

### 12.9 스레드 풀

- 스레드 개수의 폭발적 증가로 인한 성능저하를 막기위해 **스레드 풀**이라는 것을 만들어 사용한다.
  - 스레드 풀은 사용할 스레드의 갯수를 제한하고, 작업 Queue에 들어오는 작업들을 스레드가 맡아 처리할 수 있게 한다.
- `java.util.concurrent` 패키지 내부에 `ExceutorService` 인터페이스와 `Executors` 클래스를 이용하면, **`ExecutorService`** 구현객체를 만들어 이를 **스레드 풀**로 사용한다.

#### 12.9.1 스레드풀 생성 및 종료

##### 스레드풀 생성

- `Executors` 클래스의 두 정적 메소드를 통해서 간편하게 생성할 수 있다.	

  | 메소드명                    | 초기스레드 | 코어스레드 | 최대스레드          |
  | --------------------------- | ---------- | ---------- | ------------------- |
  | `newCachedThreadPool()`     | 0          | 0          | `Integet.MAX_VALUE` |
  | `newFixedThreadPool(int n)` | 0          | n          | n                   |

  - 초기 스레드 수: `ExecutorService` 객체가 생성될 때 생성되는 스레드 수
  - 코어 스레드 수: 사용되지 안흔ㄴ 스레드를 제거할 떄 최소한 유지할 스레드 수
  - 최대 스레드 수: 스레드 풀이 관리할 최대 스레드 수

- **`newCachedThreadPool()` **의 경우 스레드 개수보다 작업개수가 많으면, 새 스레드를 생성시키고, 이론적으로는 `Integer.MAX_VALUE`까지 추가되지만, 운영체제에 성능에 따라 다랄진다.

  - 또한 1개이상의 스레드가 추가된경우 60초 동안 스레드가 아무작업을 하지않으면 추가된 스레드를 종료하고 풀에서 제거한다.

- **`newFixedThreadPool(int n)`**의 경우  최대 스레드가는 매개값으로 전달한 n개 이고, 스레드가 작업을 처리하지 않더라도 스레드 개수를 줄이지 않는다.

  - 다음 처럼 CPU 코어의 수만큼 최대 스레드를 사용하는 스레드풀을 만들 수도 있다.

  ```java
  ExecutorService threadPool = Executors.newFixedThreadPool(
  	Runtime.getRuntime().availableProcessors()	
  );
  
  ```

- 이외에도, **직접** ThreadPoolExecutor를 생성해서, 상세값을 설정할 수도 있다.

##### 스레드풀 종료

- 스레드 풀의 스레드는 데몬 스레드가 아니기에, main 스레드의 종료로 종료되지 않는다.
  - 따라서 어플리케이션 프로세스를 완전히 종료시키려면 스레드풀을 종료시켜야 한다.
- 이를 위해 `ExecutorService`는 아래의 세 가지 메소드를 제공한다.

| 리턴타입         | 메소드명                                        | 설명                                                         |
| ---------------- | ----------------------------------------------- | ------------------------------------------------------------ |
| `void`           | `shutdown()`                                    | 현재 처리중인 작업과 작업큐에 대기중인 모든 작업을 처리하고 종료시킨다 |
| `List<Runnable>` | `shutdownNow()`                                 | 현재 작업중인 스레드를 `interrupt`해서 중지를 시도하고, 스레드풀을 종료한다. 리턴값은 작업큐에 있는 미처리된 `Runnable`이다 |
| `boolean`        | `awaitTermination(long timeout, TimeUnit unit)` | `shutdown()` 호출 이후에 모든 작업처리를 `timeout`내에 완료하면 `true`를 리턴하고, 아니면 `false`를 리턴 |

#### 12.9.2 작업 생성과 처리 요청

##### 작업 생성

- 하나의 작업은 `Runnable` 혹은 `Callable`의 구현클래스로 만든다
  - 두개의 차이는 `Callable`의 경우 작업 종료 후 리턴 값이 존재한다는 것이다.

##### 작업 처리 요청

- `ExecutorService`의 작업 큐에 작업 객체를 전달하면, 작업 처리 요청이 된다. 이를 위해 두 개의 메소드가 있다.

| 리턴타입                                    | 메소드명                                                     | 설명                                                         |
| ------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |
| `void`                                      | `execute(Runnable command)`                                  | `Runnable` 작업 큐에 저장, 작업 처리 결과를 받지 못함        |
| `Future<?>`<br/>`Future<V>`<br/>`Futrue<V>` | `submit(Runnable task)`<br/>`submit(Runnable task, V result)` <br/>`submit(Callable<V> task)` | `Runnable` 또는 `Callable`을 작업큐에 저장하고, <br/>리턴된 `Future`을 통해 작업 처리 결과를 얻을 수 있음 |

- 추가적으로 `execute()`의 경우 작업 처리중 **예외가 발생**하면 스레드가 종료되고 제거된다. 
  - `submit()`의 경우 스레드를 재사용하기 때문에 스레드 생성 오버헤드 방지를 위해 `submit()`을 사용하는 편이 더 합리적이다.

#### 12.9.3 블로킹 방식의 작업 완료 통보

- 앞서 살펴본 작업 처리요청에 따라 리턴하는 `Future`타입은 작업 결과가 아니라, 작업이 완료될 때 까지 기다렸다가 최종결과를 얻는, 일명 **지연완료** 객체이다.
  - `Future` 객체의 `get()`메소드는 작업이 완료될 떄까지 **블로킹**하였다가 결과를 리턴한다.

| 리턴타입 | 메소드명                           | 설명                                                         |
| -------- | ---------------------------------- | ------------------------------------------------------------ |
| `V`      | `get()`                            | 작업이 완료될 때까지 블로킹 되었다가 결과 `V`를 리턴         |
| `V`      | `get(long timeout, TimeUnit unit)` | `timeout` 시간전에 작업이 완료되면 `V`를 리턴하지만, 작업이 완료되지 않으면 예외 발생 |

- `Future` 객체의 `get()`으로 처리하는 블로킹 방식은 별도의 스레드에서 처리해야 한다는 점이다.
  - 그 이유는 작업완료 전에는 `get()`이 호출되는 곳에서는 코드가 실행되지 않기 때문이다.
- 아래는 `Future` 객체가 제공하는 다른 메소드 이다.

| 리턴 타입 | 메소드명                                | 설명                            |
| --------- | --------------------------------------- | ------------------------------- |
| `boolean` | `cancel(boolean mayInterruptIfRunning)` | 작업 처리가 진행 중일 경우 취소 |
| `boolean` | `isCancelled()`                         | 작업이 취소되었는지 여부        |
| `boolean` | `isDone()`                              | 작업처리가 완료되었는지 여부    |

##### 리턴 값이 없는 작업 완료 통보

- `Runnable`로 작업을 생성하고, `submit(Runnable task)`를 통해 처리요청한다.
  - 결과값이 없지만, `Future` 객체를 리턴하는데 이를 통해 작업 처리 완료 여부나 예외를 알 수 있다.

##### 리턴 값이 있는 작업 완료 통보

- `Callable`로 작업을 생성하고, `submit()`을 호출해서 작업 처리요청한다.
- `Future<T>`를 리턴하는데 이때, `T`는 `Callable` 객체의 `call()` 메소드가 리턴하는 타입이다.

##### 작업 처리 결과를 외부 객체에 저장

- 두개 이상의 스레드가 실행하는 작업의 결과를 공유된 객체에 저장하여 취합할 수 있다.

<div class="mermaid">
graph LR
	T1(스레드1<br/>작업 처리<br/>fa:fa-spinner)
	T2(스레드2<br/>작업 처리<br/>fa:fa-spinner)
	R(Result<br/>결과 취합)
	U(결과 이용)
	T1-->R
	T2-->R
	R-->U
</div>

- 위의 작업을 코드로 간단하게 표현하면 아래의 구조로 설명할 수 있다.

  1. 먼저 작업 객체들이 작업 결과를 공유할 공유 객체를 만든다

     ```java
     class Result{
         int value;
         synchronized void addValue(int value){
             this.value += value;
         }
     }
     
     ```

  2. `Runnable` 구현 클래스로 작업객체를 만들고, 내부에 공유할 수 있는 필드를 생성한다.

     ```java
     class Task implements Runnable{
         Result result;
         Task(Result result) {this.result = result};
         @Override
         public void run(){
             //작업코드
             //작업 결과를 result에 저장
             result.addValue(...);
         }
     }
     
     ```

  3. `ExecutorService.submit(Runnable task, V result)`를 통해 `Future<V>`를 리턴받는다

     ```java
     Result result = new result(...);
     Runnable task1 = new Task(result);
     Runnable task2 = new Task(reuslt); // 두가지 작업을 생성하는데 동일한 Result 전달
     
     Future<Result> future1 = executorService.submit(task1, reuslt);
     Future<Result> future2 = executorService.submit(task2, reuslt);
     
     try{
         result = future1.get();
         result = future2.get();
         System.out.println(result.value) //두 작업의 결과 취합한 값이 나옴
     }
     
     ```

##### 작업 완료 순으로 통보

- 스레드풀에 넘겨준 작업은, 요청한 순차적으로 완료되지 않는다. 작업처리가 완료된 것만 통보를 받기를 원한다면 `CompletionService`를 사용하면 된다. 아래는 제공하는 메소드들이다.

| 리턴 타입   | 메소드명                            | 설명                                                       |
| ----------- | ----------------------------------- | ---------------------------------------------------------- |
| `Future<v>` | `poll()`                            | 완료된 작업의 `Future`가져옴, 없다면 null                  |
| `Future<v>` | `poll(long timeout, TimeUnit unit)` | 완료된 작업의 `Future`를 가져옴 없다면 timeout 까지 블로킹 |
| `Future<v>` | `take()`                            | 완료된 작업으 Future를 가져옴, 없다면 있을때까지 블로킹 됨 |
| `Future<v>` | `submit(Callable<V> task)`          | 스레드풀에 `Callable`작업 처리요청                         |
| `Future<v>` | `submit(Runnable task, V result)`   | 스레드풀에 `Runnable` 작업 처리 요청                       |

- 구현체인 `ExecutorCompletionService<V>`를 사용하면 되는데, 생성시에 매개값으로 `ExecutorService`를 제공하면 된다.

```java
ExecutorService executorService = Executors.newFixedThreadPool(
	Runtime.getRuntime().availableProcessors()
);

CompletionService<V> completionService = new ExecutorCompletionService<V>(
	executorService
);

completionService.submit(callableTask);
completionService.submit(runnableTask, Result);

completionService.take(); //완료된 작업이 있을때까지 블로킹, 작업이 있으면 리턴
int value = Future.get().getValue(); //여기에서 Future는 블로킹이 일어나지 않음

```

#### 12.9.4 콜백 방식의 작업 완료 통보

- 콜백이란, 특정 작업이 완료되면, 정해진 메소드를 자동으로 실행하는 기법을 말한다
  - 블로킹 방식은 작업이 완료될 때까지 블로킹 되지만, 콜백은 작업 종료후 실행할 메소드를 전달하기 때문에 그이외에 기능들이 실행될 수 있다.
- 이를 위해서는 `Runnable` 구현 클래스를 작성할 때 콜백기능을 구현해 주어야 한다.
- 콜백 기능을 가진 메소드를 소유한 클래스는 `java.nio.channels.CompletionHandler`를 이용하여 구현한다.
  - 해당 인터페이스는 완료시에 호출되는 `completed()`와 예외시에 호출하는 `failed()`를 제공한다.





